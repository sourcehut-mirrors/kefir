.Dd January 2025
.Dt kefir 1
.Os
.\"
.\"
.\"
.Sh NAME
.Nm kefir
.Nd C17 language compiler
.\"
.\"
.\"
.Sh SYNOPSIS
.Nm
.Op options
.Ar files...
.Oo
.Fl run
.Op args...
.Oc
.\"
.\"
.\"
.Sh DESCRIPTION
.Nm
command-line options follow
.Xr c99 1
compiler interface, extending it with some of supported
.Xr gcc 1
flags and flags for special
.Nm
features. Unknown command-line flags are ignored with a warning printed for each such flag passed to the compiler.
.Nm
compiler driver features multiple operation modes. Command-line flags are parsed in left-to-right order with later flags overriding earlier.
Some of operation modes, once selected, prevent further parsing and immediately invoke selected mode (refer to
.Sx OPTIONS
section for details).
.\"
.\"
.\"
.Sh OPTIONS
The following options terminate command-line argument parsing:
.Bl -tag -width Ds
.It Fl h | \-help
Print help text
.\"
.It Fl v | \-version
Print compiler version
.\"
.It Fl \-compiler-info
Print compiler information
.\"
.It Fl \-environment-info
Print compiler environment information (see
.Sx ENVIRONMENT
section below)
.\"
.It Fl \-environment-header
Print compiler environment header file (based on
.Sx ENVIRONMENT
section and current target)
.\"
.It Fl verbose
Report commands executed by the driver verbosely
.El
.Pp
If passed,
.Fl cc1
argument invokes kefir-cc1 compiler directly, skipping the driver. The argument
shall always be passed first to take an effect.
.Pp
The rest of command-line options are parsed normally:
.Bl -tag -width Ds
.\"
.It Fl c
Skip the link-edit phase of the compilation, save object files
.\"
.It Fl S
Skip assembling phase of the compilation, save assembly files
.\"
.It Fl E
Preprocess C-language source files, print results to standard output
.\"
.It Fl P
Preprocess C-language source files, print results to standard output
.\"
.It Fl preprocess\-save
Preprocess C-language source files, save results
.\"
.It Fl o Ar file
Save results to the output file
.\"
.It Fl \-target Ar specification
Generate code for specified target system (see
.Sx TARGET
section below)
.\"
.It Fl O Ar level
Code optimization level (default is 0). All non-zero levels are equivalent to 1. All non-numerical levels (such as \-Os) are also equivalent to 1.
.\"
.It Fl fpreprocessed
Skip preprocessing stage
.\"
.It Fl funsigned-char
Let the type char be unsigned. By default, it is target-specific.
.\"
.It Fl fsigned-char
Let the type char be signed. By default, it is target-specific.
.\"
.It Fl D Ar name[=value]
Define preprocessor macro
.\"
.It Fl U Ar name
Undefine predefined preprocessor macro
.\"
.It Fl I Ar directory
Add directory to preprocessor include path
.\"
.It Fl isystem Ar directory
Add directory to preprocessor system include path
.\"
.It Fl iquote Ar directory
Add directory to preprocessor include path for quoted includes exclusively (processed before
.Fl I
).
.\"
.It Fl idirafter Ar directory
Add directory to preprocessor system include path (after processing other system include directories)
.\"
.It Fl \-embed-dir= Ar directory
Add directory to preprocessor embed search path
.\"
.It Fl M
Output a make rule describing the dependencies of source file (including the dependencies from system path)
.\"
.It Fl MM
Output a make rule describing the dependencies of source file (excluding the dependencies from system path and their transitive includes)
.\"
.It Fl MD
Output a make rule describing the dependencies of source file (including the dependencies from system path), while also running normal compilation pipeline.
.\"
.It Fl MMD
Output a make rule describing the dependencies of source file (excluding the dependencies from system path and their transitive includes), while also running normal compilation pipeline.
.\"
.It Fl MP
Output a phony target for each depenendency of source file
.\"
.It Fl MT Ar target
Override the default target name of make rule produced by dependency generation
.\"
.It Fl MF Ar filename
Override the default output file for make rule produced by dependency generation.
.\"
.It Fl include Ar file
Include file during preprocessing phase
.\"
.It Fl s
Strip linked executable 
.\"
.It Fl r
Retain relocations in linked executable
.\"
.It Fl e Ar entry
Override entry point of linked executable
.\"
.It Fl u Ar symbol
Add undefined symbol to linked executable
.\"
.It Fl l Ar library
Link library
.\"
.It Fl L Ar directory
Add directory to linker library search path
.\"
.It Fl rpath Ar directory
Add directory to runtime library search path
.\"
.It Fl soname Ar name
Pass
.Fl soname
option to the linker
.\"
.It Fl pthread
Define macros and link pthread library
.\"
.It Fl rdynamic
Pass
.Fl \-export-dynamic
option to the linker
.\"
.It Fl static
Produce a statically linked executable
.\"
.It Fl shared
Produce a shared object
.\"
.It Fl fPIC | Fl fpic
Produce position-independent code [default]
.\"
.It Fl fno-pic
Do not produce position-independent code [default]
.\"
.It Fl pie
Produce position-independent executable (requires
.Fl fPIC
flag)
.\"
.It Fl no-pie
Do not produce position-independent executable [default]
.\"
.It Fl masm=ASSEMBLER
Produce code for the following assembler: [x86_64-gas-intel, x86_64-gas-intel_prefix, x86_64-gas-att (default), x86_64-yasm, intel (alias for x86_64-gas-intel), att (alias for x86_64-gas-att)].
Also affects assembler flags. Note that KEFIR_AS or AS envinronment variable shall be point to the respective assembler executable.
.\"
.It Fl fomit-frame-pointer
Omit frame pointer in leaf functions that do not need it [default on optimization levels > 0]
.\"
.It Fl fno-omit-frame-pointer
Always use frame pointer in all functions [default on optimization level 0]
.\"
.It Fl g | Fl ggdb
Produce debug information [default: off]
.\"
.It Fl g[level] | Fl ggdb[level]
Produce debug information if level is greater than 0 [default: off]
.\"
.It Fl nostartfiles
Do not link start files
.\"
.It Fl nodefaultlibs
Do not link default libraries
.\"
.It Fl nolibc
Do not link libc
.\"
.It Fl nostdlib
Do not link start files and default libraries
.\"
.It Fl nostdinc
Do not add standard library to include path
.\"
.It Fl nortinc
Do not add runtime includes to include path
.\"
.It Fl \-enable-atomics
Enables atomic support. Implies \-\-Wdeclare-atomic-support option and links appropriate atomic primitives library (libatomic/libcompiler_rt) where necessary.
.\"
.It Fl \-disable-atomics
Disables atomic support. Implies \-\-Wno-declare-atomic-support option.
.\"
.It Fl Wp,option
Pass "option" to preprocessing phase as command line option. If option contains commas, it is split into multiple options
.\"
.It Fl Xpreprocessor Ar option
Pass "option" to preprocessing phase as command line option
.\"
.It Fl Wc,option
Pass "option" to compiling phase as command line option. If option contains commas, it is split into multiple options
.\"
.It Fl Wa,option
Pass "option" to assembler phase as command line option. If option contains commas, it is split into multiple options
.\"
.It Fl Xassembler Ar option
Pass "option" to assembler phase as command line option.
.\"
.It Fl Wl,option
Pass "option" to linking phase as command line option. If option contains commas, it is split into multiple options
.\"
.It Fl z keyword
Pass "\-z keyword" to linking phase as command line options.
.\"
.It Fl Xlinker Ar option
Pass "option" to linking phase as command line option
.\"
.It Fl Woption
Pass "--option" to compiling phase as command line option
.\"
.It Fl W Ar option
Pass "option" to compiling phase as command line option
.\"
.It Fl \-restrictive-c
Enable restrictive compiling mode with C extensions disabled
.\"
.It Fl \-permissive-c
Enable permissive compiling mode with C extensions enabled [default]
.\"
.It Fl \-print-tokens
Print tokenized source in JSON format
.\"
.It Fl \-print-ast
Print AST in JSON format
.\"
.It Fl \-print-ir
Print intermediate representation in JSON format
.\"
.It Fl \-print-opt
Print optimization representation in JSON format
.\"
.It Fl run Op file Ar args...
Run the linked executable with the rest of command line arguments. If no input file was specified, the first argument is treated as input file.
.\"
.It Fl runarg Ar arg
Pass an argument to the runned process (shall precede
.Fl run
flag)
.\"
.It Fl run-stdin Ar file
Redirect runned process stdin from file (shall precede
.Fl run
flag)
.\"
.It Fl run-stdout Ar file
Redirect runned process stdout to file (shall precede
.Fl run
flag)
.\"
.It Fl run-stderr Ar file
Redirect runned process stderr to file (shall precede
.Fl run
flag)
.\"
.It Fl run-stderr2out
Redirect runned process stderr to stdout (shall precede
.Fl run
flag)
.El
.\"
.Ss COMPILER OPTIONS
Extra compiler options available via -W switch:
.Bl -tag -width Ds
.\"
.It Fl \-pp-timestamp Ar timestamp
Override preprocessor timestamp
.\"
.It Fl \-json-errors
Print errors in JSON format to stderr
.\"
.It Fl \-tabular-errors
Print errors in tabular format to stderr
.\"
.It Fl \-target-profile Ar profile
Generate code for specified target (see
.Sx TARGET
subsection)
.\"
.It Fl \-source-id Ar identifier
Force use provided source file identifier
.\"
.It Fl \-extension-lib Ar libpath
Load extension library
.\"
.It Fl \-system-include-dir Ar dir
Add directory to include search path and mark it as a system include path (used for dependency output)
.\"
.It Fl \-embed-dir Ar directory
Add directory to preprocessor embed search path
.\"
.It Fl \-debug-info
Include debug information into produced output
.\"
.It Fl \-optimizer-max-inline-depth Ar depth
Maximum depth of function inlining (5 by default).
.\"
.It Fl \-optimizer-max-inlines-per-func Ar inlines
Maximum number of inlined functions (10 by default).
.\"
.It Fl \-preprocessor-assembly-mode
Enable assembly preprocessing mode (default for .S files). In this mode,
leading '$' characters are not treated as identifier part.
.\"
.It Fl \-preprocessor-normal-mode
Disable assembly preprocessing mode (default).
.\"
.It Fl \-feature-[name]
Enable compiler feature (see
.Sx FEATURES
subsection)
.\"
.It Fl \-no-feature-[name]
Disable compiler feature (see
.Sx FEATURES
subsection)
.\"
.It Fl \-internal-[flag]
Enable compiler internal flag (see
.Sx INTERNALS
subsection)
.\"
.It Fl \-no-internal-[flag]
Disable compiler internal flag (see
.Sx INTERNALS
subsection)
.\"
.It Fl \-codegen-[option]
Enable option for code generator (see
.Sx CODEGEN
subsection)
.\"
.It Fl \-no-codegen-[option]
Disable option for code generator (see
.Sx CODEGEN
subsection)
.\"
.It Fl \-optimizer-pipeline Ar spec
Optimizer pipeline specification (see
.Sx OPTIMIZER
subsection)
.\"
.It Fl \-precise-bitfield-load-store
Load and store bitfields at byte boundaries [default: on].
Provides extra correctness for structures allocated close to a boundary
with unmapped memory pages at the expense of less efficient bitfield handling.
Does not change bitfield layout.
.\"
.It Fl \-no-precise-bitfield-load-store
Load and store bitfields at machine word boundaries [default: off].
May cause failures for structures allocated close to boundaries with unmapped
memory pages. Does not change bitfield layout.
.\"
.It Fl \-declare-atomic-support
Declare support of atomics (might require explicit linking of software atomic library such as libatomic or libcompiler_rt).
.\"
.It Fl \-no-declare-atomic-support
Declare the absence of atomic support via defining __STDC_NO_ATOMICS__ macro.
.\"
.It Fl \-unsigned-char
Let the type char be unsigned. By default, it is target-specific.
.\"
.It Fl \-signed-char
Let the type char be signed. By default, it is target-specific.
.El
.\"
.Ss FEATURES
Supported features (to be used with
.Fl \-Wfeature-[feature-name]
and
.Fl \-Wno-feature-[feature-name]
flags):
.Bl -tag -width Ds
.\"
.It Ar fail-on-attributes
Fail if __attribute__((...)) is encountered [default: off]
.\"
.It Ar missing-function-return-type
Permit function definitions with missing return type [default: on]
.\"
.It Ar designated-init-colons
Permit "fieldname:" syntax in designated initializers [default: on]
.\"
.It Ar labels-as-values
Permit label-addressing with && operator [default: on]
.\"
.It Ar non-strict-qualifiers
Disable strict qualifier checks for pointers [default: on]
.\"
.It Ar signed-enums
Force all enums to have signed integral type [default: off]
.\"
.It Ar implicit-function-decl
Permit implicit funciton declarations at use-site [default: on]
.\"
.It Ar empty-structs
Permit empty structure/union definitions [default: on]
.\"
.It Ar ext-pointer-arithmetics
Permit pointer arithmetics with function and void pointers [default: on]
.\"
.It Ar missing-braces-subobj
Permit missing braces for subobject initialization with scalar [default: on]
.\"
.It Ar statement-expressions
Enable statement expressions [default: on]
.\"
.It Ar omitted-conditional-operand
Permit omission of the middle ternary expression operand [default: on]
.\"
.It Ar int-to-pointer
Permit any integral type conversion to pointer [default: on]
.\"
.It Ar permissive-pointer-conv
Permit conversions between any pointer types [default: on]
.\"
.It Ar named-macro-vararg
Permit named macro variable arguments [default: on]
.\"
.It Ar include-next
Permit include_next preprocessor directive [default: on]
.\"
.It Ar fail-on-assembly
Disable support of inline assembly [default: off]
.\"
.It Ar va-args-comma-concat
Enable special processing for ", ##__VA_ARGS" case in preprocessor [default: on]
.\"
.It Ar switch-case-ranges
Enable support for ranges in switch cases [default: on]
.\"
.It Ar designator-subscript-ranges
Enable support for ranges in designator subscripts [default: on]
.El
.\"
.Ss CODEGEN
Supported code geneator options (to be used with
.Fl \-Wcodegen-[option]
and
.Fl \-Wno-codegen-[option]
flags):
.Bl -tag -width Ds
.\"
.It Ar emulated-tls
Use emulated TLS [disabled by default, enabled on openbsd platforms]
.\"
.It Ar pic
Generate position-independent code
.\"
.It Ar omit-frame-pointer
Omit frame pointer in leaf function that do not need it
.\"
.It Ar valgrind-compatible-x87
Replace x87 opcodes not supported by Valgrind by more expensive alternatives [default: on]
.\"
.It Ar syntax=SYNTAX
Produce assembly output with specified syntax [x86_64-intel_noprefix, x86_64-intel_prefix, x86_64-att (default), x86_64-yasm].
.\"
.It Ar details=DETAILS-SPEC
Augment assembly output with internal code generator details in comments. DETAILS-SPEC can be: vasm (virtual assembly),
vasm+regs (virtual assembly and register allocations), devasm (devirtualized assembly).
.\"
.It Ar pipeline=PIPELINE-SPEC
Code generator transformation pipeline specification consists of comma separated names of pipeline passes:
.Bl -tag -width Ds
.\"
.It Ar noop
No-operation pass
.\"
.It Ar amd64-drop-virtual
Non-functional virtual instruction elimination for amd64 targets
.\"
.It Ar amd64-peephole
Peephole optimizations for amd64 targets
.El
.El
.\"
.Ss OPTIMIZER
Optimizer pipeline specification consists of comma separated names of pipeline passes:
.Bl -tag -width Ds
.\"
.It Ar noop
No-operation pass
.\"
.It Ar phi-propagate
Wherever possible, substitue phi nodes of SSA representation by actual references
.\"
.It Ar mem2reg
Pull function local variables into registers
.\"
.It Ar op-simplify
General code simplification
.\"
.It Ar constant-fold
Folding constant expressions
.\"
.It Ar local-alloc-sink
Moving local variable allocations closer to their actual uses (does not affect effective variable lifetimes).
.\"
.It Ar dead-code-elimination
Eliminating dead code, blocks and phi links.
.\"
.It Ar block-merge
Remove unnecessary jump instructions and merge respective blocks.
.El
.\"
.Ss TARGET
Target platforms are specified in format [<backend>-]<platform>[-<variant>] where
.Bl -tag -width Ds
.\"
.It Ar backend
.Sy opt
[default]
.\"
.It Ar platform
<arch>-<os> |
.Sy host
[default]
.\"
.It Ar arch
x86_64 |
.Sy hostcpu
[default]
.\"
.It Ar platform
linux | freebsd | openbsd | netbsd |
.Sy hostos
[default]
.\"
.It Ar variant
none | musl | gnu | system |
.Sy default
.El
Backend and variant are optional parts of the target specification. Variant "none" avoids any implicit library linkages and include path. On linux, "default" is
equivalent to "gnu", on other platforms -- to "system". 
.\"
.Sh ENVIRONMENT
Environment variables that affect
.Nm
operation:
.Bl -tag -width Ds
.\"
.It Ev KEFIR_AS | Ev AS
Override the default "as" assembler
.\"
.It Ev KEFIR_LD | Ev LD
Override the default "ld" linker
.\"
.It Ev KEFIR_RTINC
Specify kefir runtime include location. Mandatory for all platform variants except "*-none"
.\"
.It Ev KEFIR_MUSL_INCLUDE
Specify musl include paths (separated by ';'). Mandatory for "linux-musl" platform variant
.\"
.It Ev KEFIR_MUSL_LIB
Specify musl library paths (separated by ';'). Mandatory for "linux-musl" platform variant
.\"
.It Ev KEFIR_MUSL_DYNAMIC_LINKER
Specify dynamic linker path. Optional for "linux-musl" platform variant
.\"
.It Ev KEFIR_GNU_INCLUDE
Specify GNU include paths (separated by ';'). Mandatory for "linux-gnu" platform variant
.\"
.It Ev KEFIR_GNU_LIB
Specify GNU library paths (separated by ';'). Mandatory for "linux-gnu" platform variant
.\"
.It Ev KEFIR_GNU_DYNAMIC_LINKER
Specify dynamic linker path. Optional for "linux-gnu" platform variant
.\"
.It Ev KEFIR_FREEBSD_INCLUDE
Specify FreeBSD include paths (separated by ';'). Mandatory for "freebsd-system" platform variant
.\"
.It Ev KEFIR_FREEBSD_LIB
Specify FreeBSD library paths (separated by ';'). Mandatory for "freebsd-system" platform variant
.\"
.It Ev KEFIR_FREEBSD_DYNAMIC_LINKER
Specify dynamic linker path. Optional for "freebsd-system" platform variant
.\"
.It Ev KEFIR_OPENBSD_INCLUDE
Specify OpenBSD include paths (separated by ';'). Mandatory for "openbsd-system" platform variant
.\"
.It Ev KEFIR_OPENBSD_LIB
Specify OpenBSD library paths (separated by ';'). Mandatory for "openbsd-system" platform variant
.\"
.It Ev KEFIR_OPENBSD_DYNAMIC_LINKER
Specify dynamic linker path. Optional for "openbsd-system" platform variant
.\"
.It Ev KEFIR_TMPDIR
Override kefir temporary directory
.\"
.It Ev KEFIR_DRIVER_CLI_QUIET
Assign "yes" (without quotes) to suppress warnings related to unknown command line options.
.El
.\"
.Sh EXIT STATUS
Normally
.Nm
exits with 0 exit code. In case of any errors in any of compilation stages, all further compilation is aborted and
non-zero exit code returned.
.\"
.Sh STANDARDS
.Nm
implements C17 language standard as specified in its final draft.
.\"
.Sh NOTES
The
.Nm
compiler is licensed under the terms of GNU GPLv3 license.
Runtime code provided along with kefir is licensed under the terms of BSD-3-Clause license.
.\"
.Pp
.Nm
is developed and maintained by
.An Jevgenijs Protopopovs
.\"
.Pp
Please report bugs found in
.Nm
to
.Mt jevgenij@protopopov.lv
.\"
.Pp
.Nm
is available online at
.Lk https://sr.ht/\(tijprotopopov/kefir/
with read-only mirrors at
.Lk https://git.protopopov.lv/kefir
and 
.Lk https://codeberg.org/jprotopopov/kefir
