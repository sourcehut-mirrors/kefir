.Dd January 2025
.Dt kefir-cc1 1
.Os
.\"
.\"
.\"
.Sh NAME
.Nm kefir-cc1
.Nd C17 language compiler
.\"
.\"
.\"
.Sh SYNOPSIS
.Nm
.Op options
.Op file
.\"
.\"
.\"
.Sh DESCRIPTION
.Nm
is a C17 language compiler (without a driver). If no input file is provided, stdin is used.
.\"
.\"
.\"
.Sh OPTIONS
.Bl -tag -width Ds
.\"
.It Fl \-pp-timestamp Ar timestamp
Override preprocessor timestamp
.\"
.It Fl \-json-errors
Print errors in JSON format to stderr
.\"
.It Fl \-tabular-errors
Print errors in tabular format to stderr
.\"
.It Fl \-target-profile Ar profile
Generate code for specified target (see
.Sx TARGET
subsection)
.\"
.It Fl \-source-id Ar identifier
Force use provided source file identifier
.\"
.It Fl \-extension-lib Ar libpath
Load extension library
.\"
.It Fl \-quote-include-dir Ar dir
Add directory to include search path exclusively for quoted includes
.\"
.It Fl \-system-include-dir Ar dir
Add directory to include search path and mark it as a system include path (used for dependency output)
.\"
.It Fl \-embed-dir Ar directory
Add directory to preprocessor embed search path
.\"
.It Fl \-debug-info
Include debug information into produced output
.\"
.It Fl \-optimizer-max-inline-depth Ar depth
Maximum depth of function inlining (5 by default).
.\"
.It Fl \-optimizer-max-inlines-per-func Ar inlines
Maximum number of inlined functions (10 by default).
.\"
.It Fl \-preprocessor-assembly-mode
Enable assembly preprocessing mode (default for .S files). In this mode,
leading '$' characters are not treated as identifier part.
.\"
.It Fl \-preprocessor-normal-mode
Disable assembly preprocessing mode (default).
.\"
.It Fl \-dump-dependencies
Output a make rule describing the dependencies of source file.
.\"
.It Fl \-system-dependencies
Include dependencies from system include directories into the make rule (used with
.Fl \-dump-dependencies
flag) [default: on].
.\"
.It Fl \-no-system-dependencies
Do not include dependencies from system include directories into the make rule (used with
.Fl \-dump-dependencies
flag).
.\"
.It Fl \-add-phony-targets
Generate phony make targets for each dependency (used with
.Fl \-dump-dependencies
flag) [default: off].
.\"
.It Fl \-no-add-phony-targets
Do not generate phony make targets for each dependency (used with
.Fl \-dump-dependencies
.\"
.It Fl \-dependency-target Ar target
Override default make rule target (used with
.Fl \-dump-dependencies
flag).
.\"
.It Fl \-dependency-output Ar filename
Output make rule into specified file (used with
.Fl \-dump-dependencies
flag).
.\"
.It Fl \-unsigned-char
Let the type char be unsigned. By default, it is target-specific.
.\"
.It Fl \-signed-char
Let the type char be signed. By default, it is target-specific.
.\"
.It Fl \-feature-[name]
Enable compiler feature (see
.Sx FEATURES
subsection)
.\"
.It Fl \-no-feature-[name]
Disable compiler feature (see
.Sx FEATURES
subsection)
.\"
.It Fl \-internal-[flag]
Enable compiler internal flag (see
.Sx INTERNALS
subsection)
.\"
.It Fl \-no-internal-[flag]
Disable compiler internal flag (see
.Sx INTERNALS
subsection)
.\"
.It Fl \-codegen-[option]
Enable option for code generator (see
.Sx CODEGEN
subsection)
.\"
.It Fl \-no-codegen-[option]
Disable option for code generator (see
.Sx CODEGEN
subsection)
.\"
.It Fl \-optimizer-pipeline Ar spec
Optimizer pipeline specification (see
.Sx OPTIMIZER
subsection)
.\"
.It Fl \-precise-bitfield-load-store
Load and store bitfields at byte boundaries [default: on].
Provides extra correctness for structures allocated close to a boundary
with unmapped memory pages at the expense of less efficient bitfield handling.
Does not change bitfield layout.
.\"
.It Fl \-no-precise-bitfield-load-store
Load and store bitfields at machine word boundaries [default: off].
May cause failures for structures allocated close to boundaries with unmapped
memory pages. Does not change bitfield layout.
.\"
.It Fl \-declare-atomic-support
Declare support of atomics (might require explicit linking of software atomic library such as libatomic or libcompiler_rt).
.\"
.It Fl \-no-declare-atomic-support
Declare the absence of atomic support via defining __STDC_NO_ATOMICS__ macro.
.El
.\"
.Ss FEATURES
Supported features (to be used with
.Fl \-feature-[feature-name]
and
.Fl \-no-feature-[feature-name]
flags) -- disabled by default:
.Bl -tag -width Ds
.\"
.It Ar fail-on-attributes
Fail if __attribute__((...)) is encountered
.\"
.It Ar missing-function-return-type
Permit function definitions with missing return type
.\"
.It Ar designated-init-colons
Permit "fieldname:" syntax in designated initializers
.\"
.It Ar labels-as-values
Permit label-addressing with && operator
.\"
.It Ar non-strict-qualifiers
Disable strict qualifier checks for pointers
.\"
.It Ar signed-enums
Force all enums to have signed integral type
.\"
.It Ar implicit-function-decl
Permit implicit funciton declarations at use-site
.\"
.It Ar empty-structs
Permit empty structure/union definitions
.\"
.It Ar ext-pointer-arithmetics
Permit pointer arithmetics with function and void pointers
.\"
.It Ar missing-braces-subobj
Permit missing braces for subobject initialization with scalar
.\"
.It Ar statement-expressions
Enable statement expressions
.\"
.It Ar omitted-conditional-operand
Permit omission of the middle ternary expression operand
.\"
.It Ar int-to-pointer
Permit any integral type conversion to pointer
.\"
.It Ar permissive-pointer-conv
Permit conversions between any pointer types
.\"
.It Ar named-macro-vararg
Permit named macro variable arguments
.\"
.It Ar include-next
Permit include_next preprocessor directive
.\"
.It Ar fail-on-assembly
Disable support of inline assembly
.\"
.It Ar va-args-comma-concat
Enable special processing for ", ##__VA_ARGS" case in preprocessor
.\"
.It Ar switch-case-ranges
Enable support for ranges in switch cases
.\"
.It Ar designator-subscript-ranges
Enable support for ranges in designator subscripts
.El
.\"
.Ss CODEGEN
Supported code geneator options (to be used with
.Fl \-codegen-[option]
and
.Fl \-no-codegen-[option]
flags):
.Bl -tag -width Ds
.\"
.It Ar emulated-tls
Use emulated TLS [disabled by default, enabled on openbsd platforms]
.\"
.It Ar pic
Generate position-independent code
.\"
.It Ar omit-frame-pointer
Omit frame pointer in leaf function that do not need it
.\"
.It Ar valgrind-compatible-x87
Replace x87 opcodes not supported by Valgrind by more expensive alternatives [default: on]
.\"
.It Ar syntax=SYNTAX
Produce assembly output with specified syntax [x86_64-intel_noprefix, x86_64-intel_prefix, x86_64-att (default)]
.\"
.It Ar details=DETAILS-SPEC
Augment assembly output with internal code generator details in comments. DETAILS-SPEC can be: vasm (virtual assembly),
vasm+regs (virtual assembly and register allocations), devasm (devirtualized assembly).
.\"
.It Ar pipeline=PIPELINE-SPEC
Code generator transformation pipeline specification (not supported for native-* targets) consists of comma separated names of pipeline passes:
.Bl -tag -width Ds
.\"
.It Ar noop
No-operation pass
.\"
.It Ar amd64-drop-virtual
Non-functional virtual instruction elimination for amd64 targets
.\"
.It Ar amd64-peephole
Peephole optimizations for amd64 targets
.El
.El
.\"
.Ss OPTIMIZER
Optimizer pipeline specification consists of comma separated names of optimization pipeline passes:
.Bl -tag -width Ds
.\"
.It Ar noop
No-operation pass
.\"
.It Ar phi-propagate
Wherever possible, substitue phi nodes of SSA representation by actual references
.\"
.It Ar mem2reg
Pull function local variables into registers
.\"
.It Ar op-simplify
General code simplification
.\"
.It Ar constant-fold
Folding constant expressions
.\"
.It Ar local-alloc-sink
Moving local variable allocations closer to their actual uses (does not affect effective variable lifetimes).
.\"
.It Ar dead-code-elimination
Eliminating dead code, blocks and phi links.
.\"
.It Ar block-merge
Remove unnecessary jump instructions and merge respective blocks.
.El
.\"
.Ss TARGET
Supported compilation targets:
.Bl -tag -width Ds
.\"
.It Ar amd64-sysv-gas
Produce optimized GNU As-compatible assembly adhering System-V AMD64 ABI [default]
.El
.\"
.Sh EXIT STATUS
Normally
.Nm
exits with 0 exit code. In case of any errors in any of compilation stages, all further compilation is aborted and
non-zero exit code retruned.
.\"
.Sh STANDARDS
.Nm
implements C17 language standard as specified in its final draft.
.\"
.Sh NOTES
The
.Nm
compiler is licensed under the terms of GNU GPLv3 license.
.\"
.Pp
.Nm
is developed and maintained by
.An Jevgenijs Protopopovs
.\"
.Pp
Please report bugs found in
.Nm
to
.Mt jevgenij@protopopov.lv
.\"
.Pp
.Nm
is available online at
.Lk https://sr.ht/\(tijprotopopov/kefir/
with read-only mirrors at
.Lk https://git.protopopov.lv/kefir
and 
.Lk https://codeberg.org/jprotopopov/kefir