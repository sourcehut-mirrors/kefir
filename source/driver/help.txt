OVERVIEW: Kefir C17 compiler

USAGE: kefir [options] files...

OPTIONS:
    -h,--help                           Print this help text
    -v,--version                        Print compiler version
    --compiler-info                     Print compiler information
    --envinronment-info                 Print compiler environment information (see ENVIRONMENT VARIABLES section below)
    --environment-header                Print compiler environment header file (based on ENVIRONMENT VARIABLES and --target)
    -c                                  Skip the link-edit phase of the compilation, save object files
    -S                                  Skip assembling phase of the compilation, save assembly files
    -E                                  Preprocess C-language source files, print results to standard output
    -P                                  Preprocess C-language source files, save results
    -o output file                      Save results to the output file
    --target specification              Generate code for specified target system (see TARGETS section below)
    -O level                            Code optimization level. All non-zero levels are equivalent to 1
    -fpreprocessed                      Skip preprocessing stage
    -D name[=value]                     Define preprocessor macro
    -U name                             Undefine predefined preprocessor macro
    -I directory                        Add directory to preprocessor include path
    -M                                  Output a make rule describing the dependencies of source file (including the dependencies from system path)
    -MM                                 Output a make rule describing the dependencies of source file (excluding the dependencies from system path and their transitive includes)
    -MT target                          Override the default target name of make rule produced by dependency generation (used with -M and -MM options)
    -include file                       Include file during preprocessing phase
    -s                                  Strip linked executable
    -r                                  Retain relocations in linked executable
    -e entry point                      Override entry point of linked executable
    -u symbol                           Add undefined symbol to linked executable
    -l library                          Link library
    -L directory                        Add directory to linker library search path
    -rpath directory                    Add directory to runtime library search path
    -static                             Produce a statically linked executable
    -shared                             Produce a shared object
    -fPIC | -fpic                       Produce position-independent code (supported only for opt-* targets)
    -fno-pic                            Do not produce position-independent code [default]
    -pie                                Produce position-independent executable (requires -fPIC)
    -no-pie                             Do not produce position-independent executable [default]
    -nostartfiles                       Do not link start files
    -nodefaultlibs                      Do not link default libraries
    -nolibc                             Do not link libc
    -nostdlib                           Do not link start files and default libraries
    -nortlib                            Do not link runtime routine library
    -nortinc                            Do not add runtime includes to include path
    -Wp,option                          Pass "option" to preprocessing phase as command line option
    -Xpreprocessor option               Pass "option" to linking phase as command line option
    -Wc,option                          Pass "option" to compiling phase as command line option
    -Wa,option                          Pass "option" to assembler phase as command line option
    -Xassembler option                  Pass "option" to assembler phase as command line option
    -Wl,option                          Pass "option" to linking phase as command line option
    -Xlinker option                     Pass "option" to linking phase as command line option
    -Woption                            Pass "--option" to compiling phase as command line option
    -W option                           Pass "option" to compiling phase as command line option
    --restrictive-c                     Enable restrictive compiling mode with C extensions disabled
    --permissive-c                      Enable permissive compiling mode with C extensions enabled [default]
    --print-tokens                      Print tokenized source in JSON format
    --print-ast                         Print AST in JSON format
    --print-ir                          Print intermediate representation in JSON format
    --print-opt                         Print optimization representation in JSON format
    --print-runtime-code                Print runtime code for selected target
    -run [file] args...                 Run the linked executable with the rest of command line arguments.
                                        If no input file was specified, the first argument is treated as input file.
    -runarg arg                         Pass an argument to the runned process (shall precede -run)
    -run-stdin file                     Redirect runned process stdin from file (shall precede -run)
    -run-stdout file                    Redirect runned process stdout to file (shall precede -run)
    -run-stderr file                    Redirect runned process stderr to file (shall precede -run)
    -run-stderr2out                     Redirect runned process stderr to stdout (shall precede -run)

COMPILER OPTIONS:
    Extra compiler options available via -W switch:
        --pp-timestamp                      Override preprocessor timestamp
        --json-errors                       Print errors in JSON format to stderr
        --tabular-errors                    Print errors in tabular format to stderr
        --target-profile profile            Generate code for specified target (see below)
        --source-id identifier              Force use provided source file identifier
        --sys-include-path dir              Add directory to include search path and mark it as a system include path (used for dependency output)
        --detailed-output                   Include references to source file in AST and token dumps
        --feature-[feature name]            Enable compiler feature (see below)
        --no-feature-[feature name]         Disable compiler feature (see below)
        --internal-[internal name]          Enable compiler internal flag (see below)
        --no-internal-[internal name]       Disable compiler internal flag (see below)
        --codegen-[option]                  Enable option for code generator (see below)
        --no-codegen-[option]               Disable option for code generator (see below)
        --optimizer-pipeline spec           Optimizer pipeline specification (see below)

    Supported features:
        fail-on-attributes                  Fail if __attribute__((...)) is encountered [default: off]
        missing-function-return-type        Permit function definitions with missing return type [default: on]
        designated-init-colons              Permit "fieldname:" syntax in designated initializers [default: on]
        labels-as-values                    Permit label-addressing with && operator [default: on]
        non-strict-qualifiers               Disable strict qualifier checks for pointers [default: on]
        signed-enums                        Force all enums to have signed integral type [default: off]
        implicit-function-decl              Permit implicit funciton declarations at use-site [default: on]
        empty-structs                       Permit empty structure/union definitions [default: on]
        ext-pointer-arithmetics             Permit pointer arithmetics with function and void pointers [default: on]
        missing-braces-subobj               Permit missing braces for subobject initialization with scalar [default: on]
        statement-expressions               Enable statement expressions [default: on]
        omitted-conditional-operand         Permit omission of the middle ternary expression operand [default: on]
        int-to-pointer                      Permit any integral type conversion to pointer [default: on]
        permissive-pointer-conv             Permit conversions between any pointer types [default: on]
        named-macro-vararg                  Permit named macro variable arguments [default: on]
        include-next                        Permit include_next preprocessor directive [default: on]
        fail-on-assembly                    Disable support of inline assembly [default: off]
        va-args-comma-concat                Enable special processing for ", ##__VA_ARGS" case in preprocessor [default: on]

    Supported internal flags:
        flat-local-scope-layout             Use flat layout for function local variable scope [default: off]

    Support code generation options:
        emulated-tls                        Use emulated TLS [disabled by default, enabled on openbsd platforms]
        pic                                 Generate position-independent code
        syntax=SYNTAX                       Produce assembly output with specified syntax [x86_64-intel_noprefix, x86_64-intel_prefix, x86_64-att (default)]

    Targets (determined by platform as specified in TARGET section):
        amd64-sysv-gas                      Produce naive GNU As-compatible assembly adhering System-V AMD64 ABI
        opt-amd64-sysv-gas                  Produce optimized GNU As-compatible assembly adhering System-V AMD64 ABI [default]

    Optimizer pipeline specification (supported only for opt-* targets) consists of comma separated names of optimization pipeline passes:
        noop                                No-operation pass
        op-simplify                         General code simplification
        constant-fold                       Folding constant expressions
        branch-removal                      Eliminating branches with constant conditions
        compare-branch-fuse                 Fusing comparisons with subsequent branch instructions


TARGETS:
    Target platforms are specified in format [<backend>-]<arch>-<platform>-<variant> where
        backend: naive, opt [default]
        arch: x86_64
        platform: linux, freebsd, openbsd, host
        variant: none, musl, gnu, system, default
    Backend is an optional part of target specification. Variant "none" avoids any implicit library linkages and include path. On linux, "default" is
    equivalent to "gnu", on other platforms -- to "system".

ENVIRONMENT VARIABLES:
    KEFIR_AS, AS                        Override the default "as" assembler
    KEFIR_LD, LD                        Override the default "ld" linker
    KEFIR_RTLIB                         Specify kefir runtime library location. Optional: it not specified, built-in runtime library will be used.
    KEFIR_RTINC                         Specify kefir runtime include location. Mandatory for all platform variants except "*-none"
    KEFIR_MUSL_INCLUDE                  Specify musl include paths (separated by ';'). Mandatory for "linux-musl" platform variant
    KEFIR_MUSL_LIB                      Specify musl library paths (separated by ';'). Mandatory for "linux-musl" platform variant
    KEFIR_MUSL_DYNAMIC_LINKER           Specify dynamic linker path. Optional for "linux-musl" platform variant
    KEFIR_GNU_INCLUDE                   Specify GNU include paths (separated by ';'). Mandatory for "linux-gnu" platform variant
    KEFIR_GNU_LIB                       Specify GNU library paths (separated by ';'). Mandatory for "linux-gnu" platform variant
    KEFIR_GNU_DYNAMIC_LINKER            Specify dynamic linker path. Optional for "linux-gnu" platform variant
    KEFIR_FREEBSD_INCLUDE               Specify FreeBSD include paths (separated by ';'). Mandatory for "freebsd-system" platform variant
    KEFIR_FREEBSD_LIB                   Specify FreeBSD library paths (separated by ';'). Mandatory for "freebsd-system" platform variant
    KEFIR_FREEBSD_DYNAMIC_LINKER        Specify dynamic linker path. Optional for "freebsd-system" platform variant
    KEFIR_OPENBSD_INCLUDE               Specify OpenBSD include paths (separated by ';'). Mandatory for "openbsd-system" platform variant
    KEFIR_OPENBSD_LIB                   Specify OpenBSD library paths (separated by ';'). Mandatory for "openbsd-system" platform variant
    KEFIR_OPENBSD_DYNAMIC_LINKER        Specify dynamic linker path. Optional for "openbsd-system" platform variant
    KEFIR_WORKDIR                       Override kefir temporary work directory

NOTES:
    License                             GNU GPLv3
    Author                              Jevgenijs Protopopovs
    Website                             https://github.com/protopopov1122/kefir
                                        https://sr.ht/~jprotopopov/kefir/
    Contacts                            jevgenij@protopopov.lv
