.att_syntax
.section .note.GNU-stack,"",%progbits

.global testfn
.type testfn, @function
.extern __kefirrt_opt_amd64_sysv_vararg_save
.extern __kefirrt_opt_load_int_vararg
.extern __kefirrt_opt_load_sse_vararg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint
.extern __kefirrt_opt_long_double_to_int
.extern __kefirrt_opt_long_double_to_uint
.extern __kefirrt_opt_complex_long_double_equals
.extern __kefirrt_opt_complex_long_double_truncate_1bit
.extern __kefirrt_opt_complex_float32_mul
.extern __kefirrt_opt_complex_float32_div
.extern __kefirrt_opt_complex_float64_mul
.extern __kefirrt_opt_complex_float64_div
.extern __kefirrt_opt_complex_long_double_mul
.extern __kefirrt_opt_complex_long_double_div
.extern __kefirrt_fenv_update
.extern __kefir_opt_float32_neg
.extern __kefir_opt_float64_neg
.extern __kefir_opt_uint2long_double
.extern __kefir_opt_complex_float32_neg
.extern __kefir_opt_complex_float64_neg

.section .text
testfn:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    mov %rsi, %rcx
    movq %rsi, -8(%rbp)
    lea -8(%rbp), %rsi
    movq %rsi, -16(%rbp)
    mov %rdx, %rdi
    mov %rax, %rsi
    mov %rcx, %rdx
call somefn
    movq -16(%rbp), %rcx
    mov %rax, (%rcx)
    movq -8(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret


