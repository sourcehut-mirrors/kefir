.att_syntax
.section .note.GNU-stack,"",%progbits

.global test2_atomic_load8
.global test2_atomic_load128
.global test2_atomic_load256
.global test_atomic_load8
.global test_atomic_load16
.global test_atomic_load32
.global test_atomic_load64
.global test_atomic_load128
.global test_atomic_load256
.global test2_atomic_load16
.global test2_atomic_load32
.global test2_atomic_load64
.extern __atomic_load
.extern __kefirrt_opt_amd64_sysv_vararg_save
.extern __kefirrt_opt_load_int_vararg
.extern __kefirrt_opt_load_sse_vararg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint
.extern __kefirrt_opt_long_double_to_int
.extern __kefirrt_opt_long_double_to_uint
.extern __kefirrt_opt_complex_long_double_equals
.extern __kefirrt_opt_complex_long_double_truncate_1bit
.extern __kefirrt_opt_complex_float32_mul
.extern __kefirrt_opt_complex_float32_div
.extern __kefirrt_opt_complex_float64_mul
.extern __kefirrt_opt_complex_float64_div
.extern __kefirrt_opt_complex_long_double_mul
.extern __kefirrt_opt_complex_long_double_div
.extern __kefirrt_fenv_update

.section .text
test2_atomic_load8:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movb %cl, -1(%rbp)
    mov $1, %rcx
    lea -1(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxb -1(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test2_atomic_load128:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    mov %rdi, %rax
    mov $16, %rcx
    lea -16(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    fldt -16(%rbp)
    fstpt -48(%rbp)
    fldt -48(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

test2_atomic_load256:
    push %rbp
    mov %rsp, %rbp
    sub $144, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    mov $32, %rcx
    lea -112(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    lea -112(%rbp), %rax
    fldt (%rax)
    fstpt -144(%rbp)
    fldt 16(%rax)
    fstpt -128(%rbp)
    fldt -128(%rbp)
    fldt -144(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load8:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movb %cl, -1(%rbp)
    mov $1, %rcx
    lea -1(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxb -1(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load16:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movw %cx, -2(%rbp)
    mov $2, %rcx
    lea -2(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxw -2(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load32:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movl %ecx, -4(%rbp)
    mov $4, %rcx
    lea -4(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxl -4(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load64:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movq %rcx, -8(%rbp)
    mov $8, %rcx
    lea -8(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movq -8(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load128:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    mov %rdi, %rax
    mov $16, %rcx
    lea -32(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    fldt -32(%rbp)
    fstpt -48(%rbp)
    fldt -48(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

test_atomic_load256:
    push %rbp
    mov %rsp, %rbp
    sub $144, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    mov $32, %rcx
    lea -112(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    lea -112(%rbp), %rax
    fldt (%rax)
    fstpt -144(%rbp)
    fldt 16(%rax)
    fstpt -128(%rbp)
    fldt -128(%rbp)
    fldt -144(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

test2_atomic_load16:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movw %cx, -2(%rbp)
    mov $2, %rcx
    lea -2(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxw -2(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test2_atomic_load32:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movl %ecx, -4(%rbp)
    mov $4, %rcx
    lea -4(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movsxl -4(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test2_atomic_load64:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movq %rcx, -8(%rbp)
    mov $8, %rcx
    lea -8(%rbp), %rdx
    mov $5, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_load@PLT
    movq -8(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret


