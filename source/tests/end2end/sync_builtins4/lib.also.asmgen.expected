.att_syntax
.section .note.GNU-stack,"",%progbits

.global clear
.global test_and_set
.global test_sync_synchronize
.extern __atomic_exchange
.extern __atomic_store
.extern __kefir_atomic_seq_cst_fence
.extern __kefirrt_opt_amd64_sysv_vararg_save
.extern __kefirrt_opt_load_int_vararg
.extern __kefirrt_opt_load_sse_vararg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint
.extern __kefirrt_opt_long_double_to_int
.extern __kefirrt_opt_long_double_to_uint
.extern __kefirrt_opt_complex_long_double_equals
.extern __kefirrt_opt_complex_long_double_truncate_1bit
.extern __kefirrt_opt_complex_float32_mul
.extern __kefirrt_opt_complex_float32_div
.extern __kefirrt_opt_complex_float64_mul
.extern __kefirrt_opt_complex_float64_div
.extern __kefirrt_opt_complex_long_double_mul
.extern __kefirrt_opt_complex_long_double_div
.extern __kefirrt_fenv_update
.extern __kefir_opt_float32_neg
.extern __kefir_opt_float64_neg
.extern __kefir_opt_uint2long_double
.extern __kefir_opt_complex_float32_neg
.extern __kefir_opt_complex_float64_neg

.section .text
clear:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    xor %ecx, %ecx
    movl %ecx, -4(%rbp)
    mov $1, %rcx
    lea -4(%rbp), %rdx
    mov $3, %r8
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    call __atomic_store@PLT
    lea (%rbp), %rsp
    pop %rbp
    ret

test_and_set:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    mov $1, %rcx
    movl %ecx, -4(%rbp)
    movb %cl, -8(%rbp)
    mov $1, %rcx
    lea -4(%rbp), %rdx
    lea -8(%rbp), %r8
    mov $2, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    mov %r8, %rcx
    mov %r9, %r8
    call __atomic_exchange@PLT
    movzxb -8(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret

test_sync_synchronize:
    push %rbp
    mov %rsp, %rbp
    call __kefir_atomic_seq_cst_fence@PLT
    pop %rbp
    ret


