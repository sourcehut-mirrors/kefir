.att_syntax
.section .note.GNU-stack,"",%progbits

.global add_i8
.type add_i8, @function
.global add_ld
.type add_ld, @function
.global ior_i8
.type ior_i8, @function
.global shl_i8
.type shl_i8, @function
.global shr_i8
.type shr_i8, @function
.global add_f32
.type add_f32, @function
.global add_f64
.type add_f64, @function
.global add_i16
.type add_i16, @function
.global add_i32
.type add_i32, @function
.global add_i64
.type add_i64, @function
.global add_ptr
.type add_ptr, @function
.global iand_i8
.type iand_i8, @function
.global ior_i16
.type ior_i16, @function
.global ior_i32
.type ior_i32, @function
.global ior_i64
.type ior_i64, @function
.global ixor_i8
.type ixor_i8, @function
.global shl_i16
.type shl_i16, @function
.global shl_i32
.type shl_i32, @function
.global shl_i64
.type shl_i64, @function
.global shr_i16
.type shr_i16, @function
.global shr_i32
.type shr_i32, @function
.global shr_i64
.type shr_i64, @function
.global iand_i16
.type iand_i16, @function
.global iand_i32
.type iand_i32, @function
.global iand_i64
.type iand_i64, @function
.global ixor_i16
.type ixor_i16, @function
.global ixor_i32
.type ixor_i32, @function
.global ixor_i64
.type ixor_i64, @function
.global divide_i8
.type divide_i8, @function
.global divide_ld
.type divide_ld, @function
.global modulo_i8
.type modulo_i8, @function
.global divide_f32
.type divide_f32, @function
.global divide_f64
.type divide_f64, @function
.global divide_i16
.type divide_i16, @function
.global divide_i32
.type divide_i32, @function
.global divide_i64
.type divide_i64, @function
.global modulo_i16
.type modulo_i16, @function
.global modulo_i32
.type modulo_i32, @function
.global modulo_i64
.type modulo_i64, @function
.global multiply_i8
.type multiply_i8, @function
.global multiply_ld
.type multiply_ld, @function
.global subtract_i8
.type subtract_i8, @function
.global subtract_ld
.type subtract_ld, @function
.global multiply_f32
.type multiply_f32, @function
.global multiply_f64
.type multiply_f64, @function
.global multiply_i16
.type multiply_i16, @function
.global multiply_i32
.type multiply_i32, @function
.global multiply_i64
.type multiply_i64, @function
.global subtract_f32
.type subtract_f32, @function
.global subtract_f64
.type subtract_f64, @function
.global subtract_i16
.type subtract_i16, @function
.global subtract_i32
.type subtract_i32, @function
.global subtract_i64
.type subtract_i64, @function
.global subtract_ptr
.type subtract_ptr, @function

.section .text
__kefir_text_section_begin:
add_i8:
__kefir_text_func_add_i8_begin:
    movsx %sil, %rsi
_kefir_func_add_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    add %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_add_i8_end:

add_ld:
__kefir_text_func_add_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    fstcw -8(%rbp)
    fldt 16(%rbp)
    mov %rdi, %r10
    fstpt -64(%rbp)
    fnstenv -48(%rbp)
    stmxcsr -20(%rbp)
    fnclex
_kefir_func_add_ld_label1:
    movq %r10, -96(%rbp)
    lea -112(%rbp), %rdx
    mov %r10, %rsi
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %r10
    fldt -64(%rbp)
    fldt -112(%rbp)
    fld %st(0)
    fstpt -112(%rbp)
    faddp
    fstpt -80(%rbp)
    movq %r10, -16(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $10, %rdi
    fldt -112(%rbp)
    movq $0, -104(%rbp)
    fstpt -112(%rbp)
    lea -112(%rbp), %rdx
    fldt -80(%rbp)
    movq $0, -88(%rbp)
    fstpt -96(%rbp)
    lea -96(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movq -16(%rbp), %r10
    test %al, %al
    jz _kefir_func_add_ld_label3
    stmxcsr -112(%rbp)
    mov -112(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -48(%rbp)
    ldmxcsr -20(%rbp)
    stmxcsr -112(%rbp)
    orl %eax, -112(%rbp)
    ldmxcsr -112(%rbp)
    fldt -80(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_add_ld_label3:
    fnclex
    jmp _kefir_func_add_ld_label1
__kefir_text_func_add_ld_end:

ior_i8:
__kefir_text_func_ior_i8_begin:
    movsx %sil, %rsi
_kefir_func_ior_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    or %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ior_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_ior_i8_end:

shl_i8:
__kefir_text_func_shl_i8_begin:
    movsx %sil, %rsi
_kefir_func_shl_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    mov %rsi, %rcx
    shl %cl, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shl_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_shl_i8_end:

shr_i8:
__kefir_text_func_shr_i8_begin:
    movsx %sil, %rsi
_kefir_func_shr_i8_label1:
    movb (%rdi), %al
    movsx %al, %r8
    mov %rax, %r9
    mov %rsi, %rcx
    sar %cl, %r9b
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shr_i8_label1
    mov %r9, %rax
    ret
__kefir_text_func_shr_i8_end:

add_f32:
__kefir_text_func_add_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_add_f32_label1:
    movl (%rdi), %eax
    movq %rax, %xmm1
    addss %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_f32_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_add_f32_label3:
    fnclex
    jmp _kefir_func_add_f32_label1
__kefir_text_func_add_f32_end:

add_f64:
__kefir_text_func_add_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_add_f64_label1:
    movq (%rdi), %rax
    movq %rax, %xmm1
    addsd %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_f64_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_add_f64_label3:
    fnclex
    jmp _kefir_func_add_f64_label1
__kefir_text_func_add_f64_end:

add_i16:
__kefir_text_func_add_i16_begin:
    movsx %si, %rsi
_kefir_func_add_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    add %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_add_i16_end:

add_i32:
__kefir_text_func_add_i32_begin:
_kefir_func_add_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    add %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_add_i32_end:

add_i64:
__kefir_text_func_add_i64_begin:
_kefir_func_add_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    add %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_add_i64_end:

add_ptr:
__kefir_text_func_add_ptr_begin:
_kefir_func_add_ptr_label1:
    movq (%rdi), %rax
    imul $4, %rsi, %rcx
    mov %rax, %r8
    add %rcx, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_add_ptr_label1
    mov %r8, %rax
    ret
__kefir_text_func_add_ptr_end:

iand_i8:
__kefir_text_func_iand_i8_begin:
    movsx %sil, %rsi
_kefir_func_iand_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    and %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_iand_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_iand_i8_end:

ior_i16:
__kefir_text_func_ior_i16_begin:
    movsx %si, %rsi
_kefir_func_ior_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    or %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ior_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_ior_i16_end:

ior_i32:
__kefir_text_func_ior_i32_begin:
_kefir_func_ior_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    or %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ior_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_ior_i32_end:

ior_i64:
__kefir_text_func_ior_i64_begin:
_kefir_func_ior_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    or %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ior_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_ior_i64_end:

ixor_i8:
__kefir_text_func_ixor_i8_begin:
    movsx %sil, %rsi
_kefir_func_ixor_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    xor %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ixor_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_ixor_i8_end:

shl_i16:
__kefir_text_func_shl_i16_begin:
    movsx %si, %rsi
_kefir_func_shl_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    mov %rsi, %rcx
    shl %cl, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shl_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_shl_i16_end:

shl_i32:
__kefir_text_func_shl_i32_begin:
_kefir_func_shl_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    mov %rsi, %rcx
    shl %cl, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shl_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_shl_i32_end:

shl_i64:
__kefir_text_func_shl_i64_begin:
_kefir_func_shl_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    mov %rsi, %rcx
    shl %cl, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shl_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_shl_i64_end:

shr_i16:
__kefir_text_func_shr_i16_begin:
    movsx %si, %rsi
_kefir_func_shr_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %r8
    mov %rax, %r9
    mov %rsi, %rcx
    sar %cl, %r9w
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shr_i16_label1
    mov %r9, %rax
    ret
__kefir_text_func_shr_i16_end:

shr_i32:
__kefir_text_func_shr_i32_begin:
_kefir_func_shr_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    mov %rsi, %rcx
    sar %cl, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shr_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_shr_i32_end:

shr_i64:
__kefir_text_func_shr_i64_begin:
_kefir_func_shr_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    mov %rsi, %rcx
    sar %cl, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_shr_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_shr_i64_end:

iand_i16:
__kefir_text_func_iand_i16_begin:
    movsx %si, %rsi
_kefir_func_iand_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    and %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_iand_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_iand_i16_end:

iand_i32:
__kefir_text_func_iand_i32_begin:
_kefir_func_iand_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    and %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_iand_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_iand_i32_end:

iand_i64:
__kefir_text_func_iand_i64_begin:
_kefir_func_iand_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    and %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_iand_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_iand_i64_end:

ixor_i16:
__kefir_text_func_ixor_i16_begin:
    movsx %si, %rsi
_kefir_func_ixor_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    xor %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ixor_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_ixor_i16_end:

ixor_i32:
__kefir_text_func_ixor_i32_begin:
_kefir_func_ixor_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    xor %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ixor_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_ixor_i32_end:

ixor_i64:
__kefir_text_func_ixor_i64_begin:
_kefir_func_ixor_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    xor %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_ixor_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_ixor_i64_end:

divide_i8:
__kefir_text_func_divide_i8_begin:
    movsx %sil, %rsi
_kefir_func_divide_i8_label1:
    movb (%rdi), %al
    movsx %al, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rax, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_i8_label1
    mov %r9, %rax
    ret
__kefir_text_func_divide_i8_end:

divide_ld:
__kefir_text_func_divide_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    fstcw -8(%rbp)
    fldt 16(%rbp)
    mov %rdi, %r10
    fstpt -64(%rbp)
    fnstenv -48(%rbp)
    stmxcsr -20(%rbp)
    fnclex
_kefir_func_divide_ld_label1:
    movq %r10, -96(%rbp)
    lea -112(%rbp), %rdx
    mov %r10, %rsi
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %r10
    fldt -64(%rbp)
    fldt -112(%rbp)
    fld %st(0)
    fstpt -112(%rbp)
    fdivp
    fstpt -80(%rbp)
    movq %r10, -16(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $10, %rdi
    fldt -112(%rbp)
    movq $0, -104(%rbp)
    fstpt -112(%rbp)
    lea -112(%rbp), %rdx
    fldt -80(%rbp)
    movq $0, -88(%rbp)
    fstpt -96(%rbp)
    lea -96(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movq -16(%rbp), %r10
    test %al, %al
    jz _kefir_func_divide_ld_label3
    stmxcsr -112(%rbp)
    mov -112(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -48(%rbp)
    ldmxcsr -20(%rbp)
    stmxcsr -112(%rbp)
    orl %eax, -112(%rbp)
    ldmxcsr -112(%rbp)
    fldt -80(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_divide_ld_label3:
    fnclex
    jmp _kefir_func_divide_ld_label1
__kefir_text_func_divide_ld_end:

modulo_i8:
__kefir_text_func_modulo_i8_begin:
    movsx %sil, %rsi
_kefir_func_modulo_i8_label1:
    movb (%rdi), %al
    movsx %al, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rdx, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_modulo_i8_label1
    mov %r9, %rax
    ret
__kefir_text_func_modulo_i8_end:

divide_f32:
__kefir_text_func_divide_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_divide_f32_label1:
    movl (%rdi), %eax
    movq %rax, %xmm1
    divss %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_f32_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_divide_f32_label3:
    fnclex
    jmp _kefir_func_divide_f32_label1
__kefir_text_func_divide_f32_end:

divide_f64:
__kefir_text_func_divide_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_divide_f64_label1:
    movq (%rdi), %rax
    movq %rax, %xmm1
    divsd %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_f64_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_divide_f64_label3:
    fnclex
    jmp _kefir_func_divide_f64_label1
__kefir_text_func_divide_f64_end:

divide_i16:
__kefir_text_func_divide_i16_begin:
    movsx %si, %rsi
_kefir_func_divide_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rax, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_i16_label1
    mov %r9, %rax
    ret
__kefir_text_func_divide_i16_end:

divide_i32:
__kefir_text_func_divide_i32_begin:
_kefir_func_divide_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rax, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_divide_i32_end:

divide_i64:
__kefir_text_func_divide_i64_begin:
_kefir_func_divide_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    mov %r8, %rax
    cqo
    idiv %rsi
    mov %rax, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_divide_i64_label1
    mov %r9, %rax
    ret
__kefir_text_func_divide_i64_end:

modulo_i16:
__kefir_text_func_modulo_i16_begin:
    movsx %si, %rsi
_kefir_func_modulo_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rdx, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_modulo_i16_label1
    mov %r9, %rax
    ret
__kefir_text_func_modulo_i16_end:

modulo_i32:
__kefir_text_func_modulo_i32_begin:
_kefir_func_modulo_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %r8, %rax
    cdq
    idiv %esi
    mov %rdx, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_modulo_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_modulo_i32_end:

modulo_i64:
__kefir_text_func_modulo_i64_begin:
_kefir_func_modulo_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    mov %r8, %rax
    cqo
    idiv %rsi
    mov %rdx, %r9
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_modulo_i64_label1
    mov %r9, %rax
    ret
__kefir_text_func_modulo_i64_end:

multiply_i8:
__kefir_text_func_multiply_i8_begin:
    movsx %sil, %rsi
_kefir_func_multiply_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    imul %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_multiply_i8_end:

multiply_ld:
__kefir_text_func_multiply_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    fstcw -8(%rbp)
    fldt 16(%rbp)
    mov %rdi, %r10
    fstpt -64(%rbp)
    fnstenv -48(%rbp)
    stmxcsr -20(%rbp)
    fnclex
_kefir_func_multiply_ld_label1:
    movq %r10, -96(%rbp)
    lea -112(%rbp), %rdx
    mov %r10, %rsi
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %r10
    fldt -64(%rbp)
    fldt -112(%rbp)
    fld %st(0)
    fstpt -112(%rbp)
    fmulp
    fstpt -80(%rbp)
    movq %r10, -16(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $10, %rdi
    fldt -112(%rbp)
    movq $0, -104(%rbp)
    fstpt -112(%rbp)
    lea -112(%rbp), %rdx
    fldt -80(%rbp)
    movq $0, -88(%rbp)
    fstpt -96(%rbp)
    lea -96(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movq -16(%rbp), %r10
    test %al, %al
    jz _kefir_func_multiply_ld_label3
    stmxcsr -112(%rbp)
    mov -112(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -48(%rbp)
    ldmxcsr -20(%rbp)
    stmxcsr -112(%rbp)
    orl %eax, -112(%rbp)
    ldmxcsr -112(%rbp)
    fldt -80(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_multiply_ld_label3:
    fnclex
    jmp _kefir_func_multiply_ld_label1
__kefir_text_func_multiply_ld_end:

subtract_i8:
__kefir_text_func_subtract_i8_begin:
    movsx %sil, %rsi
_kefir_func_subtract_i8_label1:
    movb (%rdi), %al
    movsx %al, %rax
    mov %rax, %r8
    sub %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgb %cl, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_i8_label1
    mov %r8, %rax
    ret
__kefir_text_func_subtract_i8_end:

subtract_ld:
__kefir_text_func_subtract_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    fstcw -8(%rbp)
    fldt 16(%rbp)
    mov %rdi, %r10
    fstpt -64(%rbp)
    fnstenv -48(%rbp)
    stmxcsr -20(%rbp)
    fnclex
_kefir_func_subtract_ld_label1:
    movq %r10, -96(%rbp)
    lea -112(%rbp), %rdx
    mov %r10, %rsi
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %r10
    fldt -64(%rbp)
    fldt -112(%rbp)
    fld %st(0)
    fstpt -112(%rbp)
    fsubp
    fstpt -80(%rbp)
    movq %r10, -16(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $10, %rdi
    fldt -112(%rbp)
    movq $0, -104(%rbp)
    fstpt -112(%rbp)
    lea -112(%rbp), %rdx
    fldt -80(%rbp)
    movq $0, -88(%rbp)
    fstpt -96(%rbp)
    lea -96(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movq -16(%rbp), %r10
    test %al, %al
    jz _kefir_func_subtract_ld_label3
    stmxcsr -112(%rbp)
    mov -112(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -48(%rbp)
    ldmxcsr -20(%rbp)
    stmxcsr -112(%rbp)
    orl %eax, -112(%rbp)
    ldmxcsr -112(%rbp)
    fldt -80(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_subtract_ld_label3:
    fnclex
    jmp _kefir_func_subtract_ld_label1
__kefir_text_func_subtract_ld_end:

multiply_f32:
__kefir_text_func_multiply_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_multiply_f32_label1:
    movl (%rdi), %eax
    movq %rax, %xmm1
    mulss %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_f32_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_multiply_f32_label3:
    fnclex
    jmp _kefir_func_multiply_f32_label1
__kefir_text_func_multiply_f32_end:

multiply_f64:
__kefir_text_func_multiply_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_multiply_f64_label1:
    movq (%rdi), %rax
    movq %rax, %xmm1
    mulsd %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_f64_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_multiply_f64_label3:
    fnclex
    jmp _kefir_func_multiply_f64_label1
__kefir_text_func_multiply_f64_end:

multiply_i16:
__kefir_text_func_multiply_i16_begin:
    movsx %si, %rsi
_kefir_func_multiply_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    imul %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_multiply_i16_end:

multiply_i32:
__kefir_text_func_multiply_i32_begin:
_kefir_func_multiply_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    imul %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_multiply_i32_end:

multiply_i64:
__kefir_text_func_multiply_i64_begin:
_kefir_func_multiply_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    imul %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_multiply_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_multiply_i64_end:

subtract_f32:
__kefir_text_func_subtract_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_subtract_f32_label1:
    movl (%rdi), %eax
    movq %rax, %xmm1
    subss %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_f32_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_subtract_f32_label3:
    fnclex
    jmp _kefir_func_subtract_f32_label1
__kefir_text_func_subtract_f32_end:

subtract_f64:
__kefir_text_func_subtract_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    fnstenv -40(%rbp)
    stmxcsr -12(%rbp)
    fnclex
_kefir_func_subtract_f64_label1:
    movq (%rdi), %rax
    movq %rax, %xmm1
    subsd %xmm0, %xmm1
    mov %rdi, %rdx
    movq %xmm1, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_f64_label3
    stmxcsr -48(%rbp)
    mov -48(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -40(%rbp)
    ldmxcsr -12(%rbp)
    stmxcsr -48(%rbp)
    orl %eax, -48(%rbp)
    ldmxcsr -48(%rbp)
    movq %xmm1, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_subtract_f64_label3:
    fnclex
    jmp _kefir_func_subtract_f64_label1
__kefir_text_func_subtract_f64_end:

subtract_i16:
__kefir_text_func_subtract_i16_begin:
    movsx %si, %rsi
_kefir_func_subtract_i16_label1:
    movw (%rdi), %ax
    movsx %ax, %rax
    mov %rax, %r8
    sub %esi, %r8d
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgw %cx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_i16_label1
    mov %r8, %rax
    ret
__kefir_text_func_subtract_i16_end:

subtract_i32:
__kefir_text_func_subtract_i32_begin:
_kefir_func_subtract_i32_label1:
    movl (%rdi), %eax
    movsx %eax, %r8
    mov %rax, %r9
    sub %esi, %r9d
    mov %rdi, %rdx
    mov %r9, %rcx
    mov %r8, %rax
    lock     cmpxchgl %ecx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_i32_label1
    mov %r9, %rax
    ret
__kefir_text_func_subtract_i32_end:

subtract_i64:
__kefir_text_func_subtract_i64_begin:
_kefir_func_subtract_i64_label1:
    movq (%rdi), %rax
    mov %rax, %r8
    sub %rsi, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_i64_label1
    mov %r8, %rax
    ret
__kefir_text_func_subtract_i64_end:

subtract_ptr:
__kefir_text_func_subtract_ptr_begin:
_kefir_func_subtract_ptr_label1:
    movq (%rdi), %rax
    imul $4, %rsi, %rcx
    mov %rax, %r8
    sub %rcx, %r8
    mov %rdi, %rdx
    mov %r8, %rcx
    lock     cmpxchgq %rcx, (%rdx)
    sete %al
    movzx %al, %rax
    test %al, %al
    jz _kefir_func_subtract_ptr_label1
    mov %r8, %rax
    ret
__kefir_text_func_subtract_ptr_end:

__kefir_text_section_end:

