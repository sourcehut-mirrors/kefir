.att_syntax
.section .note.GNU-stack,"",%progbits

.global less_or_equalsld
.global greater_or_equalsd
.global less_or_equalsd
.global greater_or_equalsld
.extern __kefir_opt_float32_neg
.extern __kefir_opt_float64_neg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint

.section .text
less_or_equalsld:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    fstcw -8(%rbp)
_kefir_func_less_or_equalsld_label0:
    lea 16(%rbp), %rax
    lea 32(%rbp), %rcx
_kefir_func_less_or_equalsld_label1:
    movq $0, -40(%rbp)
    fldt (%rcx)
    fstpt -48(%rbp)
    movq $0, -56(%rbp)
    fldt (%rax)
    fstpt -64(%rbp)
    fldt -64(%rbp)
    fstpt -96(%rbp)
    fldt -48(%rbp)
    fstpt -80(%rbp)
    fldt -80(%rbp)
    fldt -96(%rbp)
    mov $0, %rax
    fcomip
    fstp %st(0)
    seta %al
    mov $0, %rcx
    test %rax, %rax
    sete %cl
    mov %rcx, %rax
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

greater_or_equalsd:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
_kefir_func_greater_or_equalsd_label0:
_kefir_func_greater_or_equalsd_label1:
    movq %xmm1, -16(%rbp)
    movq %xmm0, -24(%rbp)
    movq -24(%rbp), %rax
    movq -16(%rbp), %rcx
    mov $0, %rdx
    movq %rax, %xmm0
    movq %rcx, %xmm1
    comisd %xmm1, %xmm0
    setae %dl
    mov %rdx, %rax
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

less_or_equalsd:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
_kefir_func_less_or_equalsd_label0:
_kefir_func_less_or_equalsd_label1:
    movq %xmm1, -16(%rbp)
    movq %xmm0, -24(%rbp)
    movq -24(%rbp), %rax
    movq -16(%rbp), %rcx
    mov $0, %rdx
    movq %rcx, %xmm0
    movq %rax, %xmm1
    comisd %xmm1, %xmm0
    setae %dl
    mov %rdx, %rax
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

greater_or_equalsld:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    fstcw -8(%rbp)
_kefir_func_greater_or_equalsld_label0:
    lea 16(%rbp), %rax
    lea 32(%rbp), %rcx
_kefir_func_greater_or_equalsld_label1:
    movq $0, -40(%rbp)
    fldt (%rcx)
    fstpt -48(%rbp)
    movq $0, -56(%rbp)
    fldt (%rax)
    fstpt -64(%rbp)
    fldt -64(%rbp)
    fstpt -96(%rbp)
    fldt -48(%rbp)
    fstpt -80(%rbp)
    fldt -96(%rbp)
    fldt -80(%rbp)
    mov $0, %rax
    fcomip
    fstp %st(0)
    seta %al
    mov $0, %rcx
    test %rax, %rax
    sete %cl
    mov %rcx, %rax
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret


