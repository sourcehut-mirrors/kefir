.att_syntax
.section .note.GNU-stack,"",%progbits

.global add_f32
.type add_f32, @function
.global add_f64
.type add_f64, @function
.global divide_f32
.type divide_f32, @function
.global divide_f64
.type divide_f64, @function
.global multiply_f32
.type multiply_f32, @function
.global multiply_f64
.type multiply_f64, @function
.global subtract_f32
.type subtract_f32, @function
.global subtract_f64
.type subtract_f64, @function

.section .text
__kefir_text_section_begin:
add_f32:
__kefir_text_func_add_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $176, %rsp
    stmxcsr -8(%rbp)
    movaps %xmm0, %xmm5
    shufps $1, %xmm5, %xmm5
    movq %xmm0, %xmm4
    mov %rdi, %r10
    fnstenv -152(%rbp)
    stmxcsr -124(%rbp)
    fnclex
_kefir_func_add_f32_label1:
    movdqu %xmm4, -120(%rbp)
    movdqu %xmm5, -104(%rbp)
    movq %r10, -88(%rbp)
    mov %r10, %rsi
    lea -176(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movdqu -120(%rbp), %xmm4
    movdqu -104(%rbp), %xmm5
    movq -88(%rbp), %r10
    movd -176(%rbp), %xmm0
    movd -172(%rbp), %xmm1
    movq %xmm0, %xmm2
    movq %xmm1, %xmm3
    addss %xmm4, %xmm2
    addss %xmm5, %xmm3
    movdqu %xmm4, -80(%rbp)
    movdqu %xmm5, -64(%rbp)
    movq %r10, -48(%rbp)
    movdqu %xmm2, -40(%rbp)
    movdqu %xmm3, -24(%rbp)
    movd %xmm0, -176(%rbp)
    movd %xmm1, -172(%rbp)
    movd %xmm2, -168(%rbp)
    movd %xmm3, -164(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -176(%rbp), %rdx
    leaq -168(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movdqu -80(%rbp), %xmm4
    movdqu -64(%rbp), %xmm5
    movq -48(%rbp), %r10
    movdqu -40(%rbp), %xmm2
    movdqu -24(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_add_f32_label3
    stmxcsr -176(%rbp)
    mov -176(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -152(%rbp)
    ldmxcsr -124(%rbp)
    stmxcsr -176(%rbp)
    orl %eax, -176(%rbp)
    ldmxcsr -176(%rbp)
    movq %xmm2, %xmm0
    insertps $16, %xmm3, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_add_f32_label3:
    fnclex
    jmp _kefir_func_add_f32_label1
__kefir_text_func_add_f32_end:

add_f64:
__kefir_text_func_add_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $224, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %r10
    movq %xmm0, -24(%rbp)
    movq %xmm1, -16(%rbp)
    movq -24(%rbp), %xmm4
    movq -16(%rbp), %xmm5
    fnstenv -176(%rbp)
    stmxcsr -148(%rbp)
    fnclex
_kefir_func_add_f64_label1:
    movq %r10, -144(%rbp)
    movdqu %xmm4, -136(%rbp)
    movdqu %xmm5, -120(%rbp)
    mov %r10, %rsi
    lea -224(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -144(%rbp), %r10
    movdqu -136(%rbp), %xmm4
    movdqu -120(%rbp), %xmm5
    movq -224(%rbp), %xmm0
    movq -216(%rbp), %xmm1
    movq %xmm0, %xmm2
    movq %xmm1, %xmm3
    addsd %xmm4, %xmm2
    addsd %xmm5, %xmm3
    movq %r10, -104(%rbp)
    movdqu %xmm4, -96(%rbp)
    movdqu %xmm5, -80(%rbp)
    movdqu %xmm2, -64(%rbp)
    movdqu %xmm3, -48(%rbp)
    movq %xmm0, -224(%rbp)
    movq %xmm1, -216(%rbp)
    movq %xmm2, -208(%rbp)
    movq %xmm3, -200(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -224(%rbp), %rdx
    leaq -208(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movq -104(%rbp), %r10
    movdqu -96(%rbp), %xmm4
    movdqu -80(%rbp), %xmm5
    movdqu -64(%rbp), %xmm2
    movdqu -48(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_add_f64_label3
    stmxcsr -224(%rbp)
    mov -224(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -176(%rbp)
    ldmxcsr -148(%rbp)
    stmxcsr -224(%rbp)
    orl %eax, -224(%rbp)
    ldmxcsr -224(%rbp)
    movq %xmm2, %xmm0
    movq %xmm3, %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_add_f64_label3:
    fnclex
    jmp _kefir_func_add_f64_label1
__kefir_text_func_add_f64_end:

divide_f32:
__kefir_text_func_divide_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $176, %rsp
    stmxcsr -8(%rbp)
    movaps %xmm0, %xmm7
    shufps $1, %xmm7, %xmm7
    movq %xmm0, %xmm8
    mov %rdi, %r10
    fnstenv -160(%rbp)
    stmxcsr -132(%rbp)
    fnclex
_kefir_func_divide_f32_label1:
    movdqu %xmm8, -120(%rbp)
    movdqu %xmm7, -104(%rbp)
    movq %r10, -88(%rbp)
    mov %r10, %rsi
    lea -176(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movdqu -120(%rbp), %xmm8
    movdqu -104(%rbp), %xmm7
    movq -88(%rbp), %r10
    movd -176(%rbp), %xmm1
    movd -172(%rbp), %xmm2
    movq %xmm1, %xmm3
    insertps $16, %xmm2, %xmm3
    movq %xmm8, %xmm0
    insertps $16, %xmm7, %xmm0
    cvtps2pd %xmm0, %xmm4
    cvtps2pd %xmm3, %xmm3
    movaps %xmm4, %xmm5
    movaps %xmm4, %xmm6
    unpcklpd %xmm4, %xmm5
    mulpd %xmm3, %xmm5
    shufpd $1, %xmm3, %xmm3
    unpckhpd %xmm4, %xmm6
    mulpd %xmm4, %xmm4
    mulpd %xmm6, %xmm3
    movaps %xmm4, %xmm6
    xorps __kefir_constant_complex_float32_div(%rip), %xmm3
    shufpd $1, %xmm4, %xmm6
    addpd %xmm3, %xmm5
    addpd %xmm6, %xmm4
    divpd %xmm4, %xmm5
    cvtpd2ps %xmm5, %xmm0
    movaps %xmm0, %xmm3
    shufps $1, %xmm3, %xmm3
    movdqu %xmm8, -80(%rbp)
    movdqu %xmm7, -64(%rbp)
    movq %r10, -48(%rbp)
    movdqu %xmm0, -40(%rbp)
    movdqu %xmm3, -24(%rbp)
    movd %xmm1, -176(%rbp)
    movd %xmm2, -172(%rbp)
    movd %xmm0, -168(%rbp)
    movd %xmm3, -164(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -176(%rbp), %rdx
    leaq -168(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movdqu -80(%rbp), %xmm8
    movdqu -64(%rbp), %xmm7
    movq -48(%rbp), %r10
    movdqu -40(%rbp), %xmm0
    movdqu -24(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_divide_f32_label3
    stmxcsr -176(%rbp)
    mov -176(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -160(%rbp)
    ldmxcsr -132(%rbp)
    stmxcsr -176(%rbp)
    orl %eax, -176(%rbp)
    ldmxcsr -176(%rbp)
    insertps $16, %xmm3, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_divide_f32_label3:
    fnclex
    jmp _kefir_func_divide_f32_label1
__kefir_text_func_divide_f32_end:

divide_f64:
__kefir_text_func_divide_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $224, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %r10
    movq %xmm0, -24(%rbp)
    movq %xmm1, -16(%rbp)
    movq -24(%rbp), %xmm4
    movq -16(%rbp), %xmm5
    fnstenv -176(%rbp)
    stmxcsr -148(%rbp)
    fnclex
_kefir_func_divide_f64_label1:
    movq %r10, -144(%rbp)
    movdqu %xmm4, -136(%rbp)
    movdqu %xmm5, -120(%rbp)
    mov %r10, %rsi
    lea -224(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -144(%rbp), %r10
    movdqu -136(%rbp), %xmm4
    movdqu -120(%rbp), %xmm5
    movq -224(%rbp), %xmm2
    movq -216(%rbp), %xmm3
    movq %xmm2, -224(%rbp)
    movq %xmm3, -216(%rbp)
    movq %xmm4, -208(%rbp)
    movq %xmm5, -200(%rbp)
    fld1
    fldl -208(%rbp)
    fld %st(0)
    fmul %st(1)
    fldl -200(%rbp)
    fld %st(0)
    fmul %st(1)
    faddp %st(2)
    fxch %st(1)
    fdivrp %st(3)
    fldl -224(%rbp)
    fld %st(0)
    fmul %st(3)
    fxch %st(1)
    fmul %st(2)
    fldl -216(%rbp)
    fld %st(0)
    fmulp %st(4)
    fxch %st(3)
    faddp %st(2)
    fxch %st(1)
    fmul %st(4)
    fstpl -224(%rbp)
    fxch %st(2)
    fmulp %st(1)
    fsubp
    fmulp
    fstpl -216(%rbp)
    movq -224(%rbp), %xmm0
    movq -216(%rbp), %xmm1
    movq %r10, -104(%rbp)
    movdqu %xmm4, -96(%rbp)
    movdqu %xmm5, -80(%rbp)
    movdqu %xmm0, -64(%rbp)
    movdqu %xmm1, -48(%rbp)
    movq %xmm2, -224(%rbp)
    movq %xmm3, -216(%rbp)
    movq %xmm0, -208(%rbp)
    movq %xmm1, -200(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -224(%rbp), %rdx
    leaq -208(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movq -104(%rbp), %r10
    movdqu -96(%rbp), %xmm4
    movdqu -80(%rbp), %xmm5
    movdqu -64(%rbp), %xmm0
    movdqu -48(%rbp), %xmm1
    test %al, %al
    jz _kefir_func_divide_f64_label3
    stmxcsr -224(%rbp)
    mov -224(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -176(%rbp)
    ldmxcsr -148(%rbp)
    stmxcsr -224(%rbp)
    orl %eax, -224(%rbp)
    ldmxcsr -224(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_divide_f64_label3:
    fnclex
    jmp _kefir_func_divide_f64_label1
__kefir_text_func_divide_f64_end:

multiply_f32:
__kefir_text_func_multiply_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $176, %rsp
    stmxcsr -8(%rbp)
    movaps %xmm0, %xmm5
    shufps $1, %xmm5, %xmm5
    movq %xmm0, %xmm6
    mov %rdi, %r10
    fnstenv -152(%rbp)
    stmxcsr -124(%rbp)
    fnclex
_kefir_func_multiply_f32_label1:
    movdqu %xmm6, -120(%rbp)
    movdqu %xmm5, -104(%rbp)
    movq %r10, -88(%rbp)
    mov %r10, %rsi
    lea -176(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movdqu -120(%rbp), %xmm6
    movdqu -104(%rbp), %xmm5
    movq -88(%rbp), %r10
    movd -176(%rbp), %xmm0
    movd -172(%rbp), %xmm1
    movq %xmm0, %xmm2
    insertps $16, %xmm1, %xmm2
    movq %xmm6, %xmm3
    insertps $16, %xmm5, %xmm3
    movaps %xmm3, %xmm4
    shufps $160, %xmm3, %xmm4
    mulps %xmm2, %xmm4
    xorps __kefir_constant_complex_float32_mul(%rip), %xmm2
    shufps $177, %xmm2, %xmm2
    shufps $245, %xmm3, %xmm3
    mulps %xmm3, %xmm2
    addps %xmm4, %xmm2
    movaps %xmm2, %xmm3
    shufps $1, %xmm3, %xmm3
    movdqu %xmm6, -80(%rbp)
    movdqu %xmm5, -64(%rbp)
    movq %r10, -48(%rbp)
    movdqu %xmm2, -40(%rbp)
    movdqu %xmm3, -24(%rbp)
    movd %xmm0, -176(%rbp)
    movd %xmm1, -172(%rbp)
    movd %xmm2, -168(%rbp)
    movd %xmm3, -164(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -176(%rbp), %rdx
    leaq -168(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movdqu -80(%rbp), %xmm6
    movdqu -64(%rbp), %xmm5
    movq -48(%rbp), %r10
    movdqu -40(%rbp), %xmm2
    movdqu -24(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_multiply_f32_label3
    stmxcsr -176(%rbp)
    mov -176(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -152(%rbp)
    ldmxcsr -124(%rbp)
    stmxcsr -176(%rbp)
    orl %eax, -176(%rbp)
    ldmxcsr -176(%rbp)
    movq %xmm2, %xmm0
    insertps $16, %xmm3, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_multiply_f32_label3:
    fnclex
    jmp _kefir_func_multiply_f32_label1
__kefir_text_func_multiply_f32_end:

multiply_f64:
__kefir_text_func_multiply_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $224, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %r10
    movq %xmm0, -24(%rbp)
    movq %xmm1, -16(%rbp)
    movq -24(%rbp), %xmm6
    movq -16(%rbp), %xmm7
    fnstenv -192(%rbp)
    stmxcsr -164(%rbp)
    fnclex
_kefir_func_multiply_f64_label1:
    movq %r10, -144(%rbp)
    movdqu %xmm6, -136(%rbp)
    movdqu %xmm7, -120(%rbp)
    mov %r10, %rsi
    lea -224(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -144(%rbp), %r10
    movdqu -136(%rbp), %xmm6
    movdqu -120(%rbp), %xmm7
    movq -224(%rbp), %xmm2
    movq -216(%rbp), %xmm3
    movq %xmm2, %xmm0
    movq %xmm3, %xmm1
    movq %xmm6, %xmm4
    movq %xmm7, %xmm5
    unpcklpd %xmm1, %xmm0
    movaps %xmm0, %xmm1
    xorps __kefir_constant_complex_float64_mul(%rip), %xmm1
    shufpd $1, %xmm1, %xmm1
    unpcklpd %xmm4, %xmm4
    unpcklpd %xmm5, %xmm5
    mulpd %xmm0, %xmm4
    mulpd %xmm1, %xmm5
    addpd %xmm4, %xmm5
    movaps %xmm5, %xmm1
    movaps %xmm5, %xmm0
    unpckhpd %xmm5, %xmm1
    movq %r10, -104(%rbp)
    movdqu %xmm6, -96(%rbp)
    movdqu %xmm7, -80(%rbp)
    movdqu %xmm0, -64(%rbp)
    movdqu %xmm1, -48(%rbp)
    movq %xmm2, -224(%rbp)
    movq %xmm3, -216(%rbp)
    movq %xmm0, -208(%rbp)
    movq %xmm1, -200(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -224(%rbp), %rdx
    leaq -208(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movq -104(%rbp), %r10
    movdqu -96(%rbp), %xmm6
    movdqu -80(%rbp), %xmm7
    movdqu -64(%rbp), %xmm0
    movdqu -48(%rbp), %xmm1
    test %al, %al
    jz _kefir_func_multiply_f64_label3
    stmxcsr -224(%rbp)
    mov -224(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -192(%rbp)
    ldmxcsr -164(%rbp)
    stmxcsr -224(%rbp)
    orl %eax, -224(%rbp)
    ldmxcsr -224(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_multiply_f64_label3:
    fnclex
    jmp _kefir_func_multiply_f64_label1
__kefir_text_func_multiply_f64_end:

subtract_f32:
__kefir_text_func_subtract_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $176, %rsp
    stmxcsr -8(%rbp)
    movaps %xmm0, %xmm5
    shufps $1, %xmm5, %xmm5
    movq %xmm0, %xmm4
    mov %rdi, %r10
    fnstenv -152(%rbp)
    stmxcsr -124(%rbp)
    fnclex
_kefir_func_subtract_f32_label1:
    movdqu %xmm4, -120(%rbp)
    movdqu %xmm5, -104(%rbp)
    movq %r10, -88(%rbp)
    mov %r10, %rsi
    lea -176(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movdqu -120(%rbp), %xmm4
    movdqu -104(%rbp), %xmm5
    movq -88(%rbp), %r10
    movd -176(%rbp), %xmm0
    movd -172(%rbp), %xmm1
    movq %xmm0, %xmm2
    movq %xmm1, %xmm3
    subss %xmm4, %xmm2
    subss %xmm5, %xmm3
    movdqu %xmm4, -80(%rbp)
    movdqu %xmm5, -64(%rbp)
    movq %r10, -48(%rbp)
    movdqu %xmm2, -40(%rbp)
    movdqu %xmm3, -24(%rbp)
    movd %xmm0, -176(%rbp)
    movd %xmm1, -172(%rbp)
    movd %xmm2, -168(%rbp)
    movd %xmm3, -164(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -176(%rbp), %rdx
    leaq -168(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movdqu -80(%rbp), %xmm4
    movdqu -64(%rbp), %xmm5
    movq -48(%rbp), %r10
    movdqu -40(%rbp), %xmm2
    movdqu -24(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_subtract_f32_label3
    stmxcsr -176(%rbp)
    mov -176(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -152(%rbp)
    ldmxcsr -124(%rbp)
    stmxcsr -176(%rbp)
    orl %eax, -176(%rbp)
    ldmxcsr -176(%rbp)
    movq %xmm2, %xmm0
    insertps $16, %xmm3, %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_subtract_f32_label3:
    fnclex
    jmp _kefir_func_subtract_f32_label1
__kefir_text_func_subtract_f32_end:

subtract_f64:
__kefir_text_func_subtract_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $224, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %r10
    movq %xmm0, -24(%rbp)
    movq %xmm1, -16(%rbp)
    movq -24(%rbp), %xmm4
    movq -16(%rbp), %xmm5
    fnstenv -176(%rbp)
    stmxcsr -148(%rbp)
    fnclex
_kefir_func_subtract_f64_label1:
    movq %r10, -144(%rbp)
    movdqu %xmm4, -136(%rbp)
    movdqu %xmm5, -120(%rbp)
    mov %r10, %rsi
    lea -224(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -144(%rbp), %r10
    movdqu -136(%rbp), %xmm4
    movdqu -120(%rbp), %xmm5
    movq -224(%rbp), %xmm0
    movq -216(%rbp), %xmm1
    movq %xmm0, %xmm2
    movq %xmm1, %xmm3
    subsd %xmm4, %xmm2
    subsd %xmm5, %xmm3
    movq %r10, -104(%rbp)
    movdqu %xmm4, -96(%rbp)
    movdqu %xmm5, -80(%rbp)
    movdqu %xmm2, -64(%rbp)
    movdqu %xmm3, -48(%rbp)
    movq %xmm0, -224(%rbp)
    movq %xmm1, -216(%rbp)
    movq %xmm2, -208(%rbp)
    movq %xmm3, -200(%rbp)
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -224(%rbp), %rdx
    leaq -208(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    movq -104(%rbp), %r10
    movdqu -96(%rbp), %xmm4
    movdqu -80(%rbp), %xmm5
    movdqu -64(%rbp), %xmm2
    movdqu -48(%rbp), %xmm3
    test %al, %al
    jz _kefir_func_subtract_f64_label3
    stmxcsr -224(%rbp)
    mov -224(%rbp), %rcx
    fnstsw %ax
    or %ecx, %eax
    and $63, %eax
    fldenv -176(%rbp)
    ldmxcsr -148(%rbp)
    stmxcsr -224(%rbp)
    orl %eax, -224(%rbp)
    ldmxcsr -224(%rbp)
    movq %xmm2, %xmm0
    movq %xmm3, %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func_subtract_f64_label3:
    fnclex
    jmp _kefir_func_subtract_f64_label1
__kefir_text_func_subtract_f64_end:

__kefir_text_section_end:

.section .rodata
    .align 16
__kefir_constant_complex_float32_mul:
    .long 0
    .long 2147483648
    .long 0
    .long 2147483648
    .align 16
__kefir_constant_complex_float32_div:
    .long 0
    .long 0
    .long 0
    .long 2147483648
    .align 16
__kefir_constant_complex_float64_mul:
    .long 0
    .long 0
    .long 0
    .long 2147483648
