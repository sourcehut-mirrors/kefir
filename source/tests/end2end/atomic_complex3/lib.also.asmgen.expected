.att_syntax
.section .note.GNU-stack,"",%progbits

.global add_f32
.global add_f64
.global divide_f32
.global divide_f64
.global multiply_f32
.global multiply_f64
.global subtract_f32
.global subtract_f64
.extern __kefir_opt_float32_neg
.extern __kefir_opt_float64_neg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint

.section .text
add_f32:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
_kefir_func_add_f32_label0:
    movq %xmm0, -64(%rbp)
_kefir_func_add_f32_label1:
    lea -24(%rbp), %rax
    movq -64(%rbp), %xmm0
    movq %xmm0, (%rax)
    lea -24(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -64(%rbp)
    mov %rdi, %r10
_kefir_func_add_f32_label2:
    movq %r10, -48(%rbp)
    mov %r10, %rsi
    lea -56(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %r10
    movd -56(%rbp), %xmm0
    movd -52(%rbp), %xmm1
    addss -64(%rbp), %xmm0
    addss -60(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq %r10, -40(%rbp)
    mov $8, %rcx
    leaq -56(%rbp), %rax
    mov %rax, %rsi
    leaq -56(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -56(%rbp), %rdx
    leaq -48(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -40(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_add_f32_label5
    movq -48(%rbp), %rax
    movq %rax, -56(%rbp)
    jmp _kefir_func_add_f32_label4
_kefir_func_add_f32_label5:
    mov %r10, %rax
    movq -64(%rbp), %rcx
    movq %rcx, -56(%rbp)
_kefir_func_add_f32_label3:
    mov %rax, %r10
    movq -56(%rbp), %rax
    movq %rax, -64(%rbp)
    jmp _kefir_func_add_f32_label2
_kefir_func_add_f32_label4:
    movq -56(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

add_f64:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
_kefir_func_add_f64_label0:
    movq %xmm0, -112(%rbp)
    movq %xmm1, -104(%rbp)
_kefir_func_add_f64_label1:
    lea -48(%rbp), %rax
    movq -112(%rbp), %xmm0
    movq %xmm0, (%rax)
    movq -104(%rbp), %xmm0
    movq %xmm0, 8(%rax)
    lea -48(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -112(%rbp)
    movq 8(%rax), %xmm0
    movq %xmm0, -104(%rbp)
    mov %rdi, %r10
_kefir_func_add_f64_label2:
    movq %r10, -80(%rbp)
    mov %r10, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %r10
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    addsd -112(%rbp), %xmm0
    addsd -104(%rbp), %xmm1
    movq %xmm0, -72(%rbp)
    movq %xmm1, -64(%rbp)
    movq %r10, -80(%rbp)
    mov $16, %rcx
    leaq -96(%rbp), %rax
    mov %rax, %rsi
    leaq -96(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -96(%rbp), %rdx
    leaq -72(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -80(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_add_f64_label5
    movq -72(%rbp), %rax
    movq %rax, -96(%rbp)
    movq -64(%rbp), %rax
    movq %rax, -88(%rbp)
    jmp _kefir_func_add_f64_label4
_kefir_func_add_f64_label5:
    mov %r10, %rax
    movq -112(%rbp), %rcx
    movq %rcx, -96(%rbp)
    movq -104(%rbp), %rcx
    movq %rcx, -88(%rbp)
_kefir_func_add_f64_label3:
    mov %rax, %r10
    movq -96(%rbp), %rax
    movq %rax, -112(%rbp)
    movq -88(%rbp), %rax
    movq %rax, -104(%rbp)
    jmp _kefir_func_add_f64_label2
_kefir_func_add_f64_label4:
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

divide_f32:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
_kefir_func_divide_f32_label0:
    movq %xmm0, -64(%rbp)
_kefir_func_divide_f32_label1:
    lea -24(%rbp), %rax
    movq -64(%rbp), %xmm0
    movq %xmm0, (%rax)
    lea -24(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -64(%rbp)
    mov %rdi, %r10
_kefir_func_divide_f32_label2:
    movq %r10, -48(%rbp)
    mov %r10, %rsi
    lea -56(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %r10
    movq -56(%rbp), %xmm0
    movq -64(%rbp), %xmm1
    call __kefirrt_opt_complex_float32_div@PLT
    movq %xmm0, -48(%rbp)
    movq %r10, -40(%rbp)
    mov $8, %rcx
    leaq -56(%rbp), %rax
    mov %rax, %rsi
    leaq -56(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -56(%rbp), %rdx
    leaq -48(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -40(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_divide_f32_label5
    movq -48(%rbp), %rax
    movq %rax, -56(%rbp)
    jmp _kefir_func_divide_f32_label4
_kefir_func_divide_f32_label5:
    mov %r10, %rax
    movq -64(%rbp), %rcx
    movq %rcx, -56(%rbp)
_kefir_func_divide_f32_label3:
    mov %rax, %r10
    movq -56(%rbp), %rax
    movq %rax, -64(%rbp)
    jmp _kefir_func_divide_f32_label2
_kefir_func_divide_f32_label4:
    movq -56(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

divide_f64:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
_kefir_func_divide_f64_label0:
    movq %xmm0, -112(%rbp)
    movq %xmm1, -104(%rbp)
_kefir_func_divide_f64_label1:
    lea -48(%rbp), %rax
    movq -112(%rbp), %xmm0
    movq %xmm0, (%rax)
    movq -104(%rbp), %xmm0
    movq %xmm0, 8(%rax)
    lea -48(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -112(%rbp)
    movq 8(%rax), %xmm0
    movq %xmm0, -104(%rbp)
    mov %rdi, %r10
_kefir_func_divide_f64_label2:
    movq %r10, -80(%rbp)
    mov %r10, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %r10
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    movq -112(%rbp), %xmm2
    movq -104(%rbp), %xmm3
    call __kefirrt_opt_complex_float64_div@PLT
    movq %xmm0, -72(%rbp)
    movq %xmm1, -64(%rbp)
    movq %r10, -80(%rbp)
    mov $16, %rcx
    leaq -96(%rbp), %rax
    mov %rax, %rsi
    leaq -96(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -96(%rbp), %rdx
    leaq -72(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -80(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_divide_f64_label5
    movq -72(%rbp), %rax
    movq %rax, -96(%rbp)
    movq -64(%rbp), %rax
    movq %rax, -88(%rbp)
    jmp _kefir_func_divide_f64_label4
_kefir_func_divide_f64_label5:
    mov %r10, %rax
    movq -112(%rbp), %rcx
    movq %rcx, -96(%rbp)
    movq -104(%rbp), %rcx
    movq %rcx, -88(%rbp)
_kefir_func_divide_f64_label3:
    mov %rax, %r10
    movq -96(%rbp), %rax
    movq %rax, -112(%rbp)
    movq -88(%rbp), %rax
    movq %rax, -104(%rbp)
    jmp _kefir_func_divide_f64_label2
_kefir_func_divide_f64_label4:
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

multiply_f32:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
_kefir_func_multiply_f32_label0:
    movq %xmm0, -64(%rbp)
_kefir_func_multiply_f32_label1:
    lea -24(%rbp), %rax
    movq -64(%rbp), %xmm0
    movq %xmm0, (%rax)
    lea -24(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -64(%rbp)
    mov %rdi, %r10
_kefir_func_multiply_f32_label2:
    movq %r10, -48(%rbp)
    mov %r10, %rsi
    lea -56(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %r10
    movq -56(%rbp), %xmm0
    movq -64(%rbp), %xmm1
    call __kefirrt_opt_complex_float32_mul@PLT
    movq %xmm0, -48(%rbp)
    movq %r10, -40(%rbp)
    mov $8, %rcx
    leaq -56(%rbp), %rax
    mov %rax, %rsi
    leaq -56(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -56(%rbp), %rdx
    leaq -48(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -40(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_multiply_f32_label5
    movq -48(%rbp), %rax
    movq %rax, -56(%rbp)
    jmp _kefir_func_multiply_f32_label4
_kefir_func_multiply_f32_label5:
    mov %r10, %rax
    movq -64(%rbp), %rcx
    movq %rcx, -56(%rbp)
_kefir_func_multiply_f32_label3:
    mov %rax, %r10
    movq -56(%rbp), %rax
    movq %rax, -64(%rbp)
    jmp _kefir_func_multiply_f32_label2
_kefir_func_multiply_f32_label4:
    movq -56(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

multiply_f64:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
_kefir_func_multiply_f64_label0:
    movq %xmm0, -112(%rbp)
    movq %xmm1, -104(%rbp)
_kefir_func_multiply_f64_label1:
    lea -48(%rbp), %rax
    movq -112(%rbp), %xmm0
    movq %xmm0, (%rax)
    movq -104(%rbp), %xmm0
    movq %xmm0, 8(%rax)
    lea -48(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -112(%rbp)
    movq 8(%rax), %xmm0
    movq %xmm0, -104(%rbp)
    mov %rdi, %r10
_kefir_func_multiply_f64_label2:
    movq %r10, -80(%rbp)
    mov %r10, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %r10
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    movq -112(%rbp), %xmm2
    movq -104(%rbp), %xmm3
    call __kefirrt_opt_complex_float64_mul@PLT
    movq %xmm0, -72(%rbp)
    movq %xmm1, -64(%rbp)
    movq %r10, -80(%rbp)
    mov $16, %rcx
    leaq -96(%rbp), %rax
    mov %rax, %rsi
    leaq -96(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -96(%rbp), %rdx
    leaq -72(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -80(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_multiply_f64_label5
    movq -72(%rbp), %rax
    movq %rax, -96(%rbp)
    movq -64(%rbp), %rax
    movq %rax, -88(%rbp)
    jmp _kefir_func_multiply_f64_label4
_kefir_func_multiply_f64_label5:
    mov %r10, %rax
    movq -112(%rbp), %rcx
    movq %rcx, -96(%rbp)
    movq -104(%rbp), %rcx
    movq %rcx, -88(%rbp)
_kefir_func_multiply_f64_label3:
    mov %rax, %r10
    movq -96(%rbp), %rax
    movq %rax, -112(%rbp)
    movq -88(%rbp), %rax
    movq %rax, -104(%rbp)
    jmp _kefir_func_multiply_f64_label2
_kefir_func_multiply_f64_label4:
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

subtract_f32:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
_kefir_func_subtract_f32_label0:
    movq %xmm0, -64(%rbp)
_kefir_func_subtract_f32_label1:
    lea -24(%rbp), %rax
    movq -64(%rbp), %xmm0
    movq %xmm0, (%rax)
    lea -24(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -64(%rbp)
    mov %rdi, %r10
_kefir_func_subtract_f32_label2:
    movq %r10, -48(%rbp)
    mov %r10, %rsi
    lea -56(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %r10
    movd -56(%rbp), %xmm0
    movd -52(%rbp), %xmm1
    subss -64(%rbp), %xmm0
    subss -60(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq %r10, -40(%rbp)
    mov $8, %rcx
    leaq -56(%rbp), %rax
    mov %rax, %rsi
    leaq -56(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $8, %rdi
    lea -56(%rbp), %rdx
    leaq -48(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -40(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_subtract_f32_label5
    movq -48(%rbp), %rax
    movq %rax, -56(%rbp)
    jmp _kefir_func_subtract_f32_label4
_kefir_func_subtract_f32_label5:
    mov %r10, %rax
    movq -64(%rbp), %rcx
    movq %rcx, -56(%rbp)
_kefir_func_subtract_f32_label3:
    mov %rax, %r10
    movq -56(%rbp), %rax
    movq %rax, -64(%rbp)
    jmp _kefir_func_subtract_f32_label2
_kefir_func_subtract_f32_label4:
    movq -56(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

subtract_f64:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
_kefir_func_subtract_f64_label0:
    movq %xmm0, -112(%rbp)
    movq %xmm1, -104(%rbp)
_kefir_func_subtract_f64_label1:
    lea -48(%rbp), %rax
    movq -112(%rbp), %xmm0
    movq %xmm0, (%rax)
    movq -104(%rbp), %xmm0
    movq %xmm0, 8(%rax)
    lea -48(%rbp), %rax
    movq (%rax), %xmm0
    movq %xmm0, -112(%rbp)
    movq 8(%rax), %xmm0
    movq %xmm0, -104(%rbp)
    mov %rdi, %r10
_kefir_func_subtract_f64_label2:
    movq %r10, -80(%rbp)
    mov %r10, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %r10
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    subsd -112(%rbp), %xmm0
    subsd -104(%rbp), %xmm1
    movq %xmm0, -72(%rbp)
    movq %xmm1, -64(%rbp)
    movq %r10, -80(%rbp)
    mov $16, %rcx
    leaq -96(%rbp), %rax
    mov %rax, %rsi
    leaq -96(%rbp), %rax
    mov %rax, %rdi
    rep movsb
    mov %r10, %rsi
    mov $5, %r8
    mov $5, %r9
    mov $16, %rdi
    lea -96(%rbp), %rdx
    leaq -72(%rbp), %rax
    mov %rax, %rcx
    call __atomic_compare_exchange@PLT
    mov %rax, %rcx
    movq -80(%rbp), %r10
    test %rcx, %rcx
    jz _kefir_func_subtract_f64_label5
    movq -72(%rbp), %rax
    movq %rax, -96(%rbp)
    movq -64(%rbp), %rax
    movq %rax, -88(%rbp)
    jmp _kefir_func_subtract_f64_label4
_kefir_func_subtract_f64_label5:
    mov %r10, %rax
    movq -112(%rbp), %rcx
    movq %rcx, -96(%rbp)
    movq -104(%rbp), %rcx
    movq %rcx, -88(%rbp)
_kefir_func_subtract_f64_label3:
    mov %rax, %r10
    movq -96(%rbp), %rax
    movq %rax, -112(%rbp)
    movq -88(%rbp), %rax
    movq %rax, -104(%rbp)
    jmp _kefir_func_subtract_f64_label2
_kefir_func_subtract_f64_label4:
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret


