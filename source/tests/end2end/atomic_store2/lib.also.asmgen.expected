.att_syntax
.section .note.GNU-stack,"",%progbits

.global store_b
.global store_u8
.global store_f32
.global store_f64
.global store_u16
.global store_u32
.global store_u64
.extern __kefirrt_opt_amd64_sysv_vararg_save
.extern __kefirrt_opt_load_int_vararg
.extern __kefirrt_opt_load_sse_vararg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint
.extern __kefirrt_opt_long_double_to_int
.extern __kefirrt_opt_long_double_to_uint
.extern __kefirrt_opt_complex_long_double_equals
.extern __kefirrt_opt_complex_long_double_truncate_1bit
.extern __kefirrt_opt_complex_float32_mul
.extern __kefirrt_opt_complex_float32_div
.extern __kefirrt_opt_complex_float64_mul
.extern __kefirrt_opt_complex_float64_div
.extern __kefirrt_opt_complex_long_double_mul
.extern __kefirrt_opt_complex_long_double_div
.extern __kefirrt_fenv_update

.section .text
store_b:
    movzx %sil, %rax
    mov %rax, %rsi
    mov $5, %rdx
    call __atomic_store_1@PLT
    ret

store_u8:
    movzx %sil, %rax
    mov %rax, %rsi
    mov $5, %rdx
    call __atomic_store_1@PLT
    ret

store_f32:
    movq %xmm0, %rsi
    mov $5, %rdx
    call __atomic_store_4@PLT
    ret

store_f64:
    movq %xmm0, %rsi
    mov $5, %rdx
    call __atomic_store_8@PLT
    ret

store_u16:
    movzx %si, %rax
    mov %rax, %rsi
    mov $5, %rdx
    call __atomic_store_2@PLT
    ret

store_u32:
    mov %esi, %eax
    mov %rax, %rsi
    mov $5, %rdx
    call __atomic_store_4@PLT
    ret

store_u64:
    mov $5, %rdx
    call __atomic_store_8@PLT
    ret


