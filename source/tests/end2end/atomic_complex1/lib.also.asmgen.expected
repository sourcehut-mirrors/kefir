.att_syntax
.section .note.GNU-stack,"",%progbits

.extern ld_1
.extern f32_1
.extern f64_1
.global add_ld
.type add_ld, @function
.global div_ld
.type div_ld, @function
.global mul_ld
.type mul_ld, @function
.global neg_ld
.type neg_ld, @function
.global sub_ld
.type sub_ld, @function
.global add_f32
.type add_f32, @function
.global add_f64
.type add_f64, @function
.global div_f32
.type div_f32, @function
.global div_f64
.type div_f64, @function
.global mul_f32
.type mul_f32, @function
.global mul_f64
.type mul_f64, @function
.global neg_f32
.type neg_f32, @function
.global neg_f64
.type neg_f64, @function
.global sub_f32
.type sub_f32, @function
.global sub_f64
.type sub_f64, @function
.extern __kefirrt_fenv_update

.section .text
__kefir_text_section_begin:
add_ld:
__kefir_text_func_add_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fldt -160(%rbp)
    faddp
    fldt -96(%rbp)
    fldt -144(%rbp)
    faddp
    fstpt -144(%rbp)
    fstpt -160(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_add_ld_end:

div_ld:
__kefir_text_func_div_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -160(%rbp)
    fldt -144(%rbp)
    fldt -112(%rbp)
    fld %st(0)
    fabs
    fldt -96(%rbp)
    fld %st(0)
    fabs
    fcomip %st(2), %st(0)
    fxch %st(1)
    fstp %st(0)
    fldt __kefir_constant_complex_long_double_div(%rip)
    jb _kefir_func_div_ld_label4
    fxch %st(1)
    fdivr %st(0), %st(2)
    fld %st(2)
    fmul %st(3), %st(0)
    fadd %st(2), %st(0)
    fmulp %st(0), %st(1)
    fdivrp %st(0), %st(1)
    fld %st(3)
    fmul %st(2), %st(0)
    fadd %st(3), %st(0)
    fmul %st(1), %st(0)
    fxch %st(3)
    fmulp %st(0), %st(2)
    fxch %st(3)
    fsubrp %st(0), %st(1)
    fmulp %st(0), %st(2)
    fxch %st(1)
_kefir_func_div_ld_label3:
    fxch %st(1)
    fxch %st(1)
    fxch %st(1)
    jmp _kefir_func_div_ld_label5
_kefir_func_div_ld_label4:
    fxch %st(1)
    fdiv %st(2), %st(0)
    fld %st(0)
    fmul %st(1), %st(0)
    fadd %st(2), %st(0)
    fmulp %st(0), %st(3)
    fxch %st(2)
    fdivrp %st(0), %st(1)
    fld %st(2)
    fmul %st(2), %st(0)
    fadd %st(4), %st(0)
    fmul %st(1), %st(0)
    fxch %st(4)
    fmulp %st(0), %st(2)
    fxch %st(1)
    fsubrp %st(0), %st(2)
    fmulp %st(0), %st(1)
    jmp _kefir_func_div_ld_label3
_kefir_func_div_ld_label5:
    fstpt -160(%rbp)
    fstpt -144(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_div_ld_end:

mul_ld:
__kefir_text_func_mul_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -144(%rbp)
    fld %st(0)
    fldt -112(%rbp)
    fldt -96(%rbp)
    fmul %st(0), %st(2)
    fldt -160(%rbp)
    fmul %st(2)
    fsubp %st(3)
    fxch %st(2)
    fxch %st(3)
    fmulp %st(1)
    fldt -160(%rbp)
    fmulp %st(2)
    faddp %st(1)
    fstpt -144(%rbp)
    fstpt -160(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_mul_ld_end:

neg_ld:
__kefir_text_func_neg_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
    movq ld_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fchs
    fstpt -80(%rbp)
    fldt -96(%rbp)
    fchs
    fstpt -64(%rbp)
    fldt -64(%rbp)
    fldt -80(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_neg_ld_end:

sub_ld:
__kefir_text_func_sub_ld_begin:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fldt -160(%rbp)
    fsubp
    fldt -96(%rbp)
    fldt -144(%rbp)
    fsubp
    fstpt -144(%rbp)
    fstpt -160(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_sub_ld_end:

add_f32:
__kefir_text_func_add_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movd -48(%rbp), %xmm0
    movd -44(%rbp), %xmm1
    addss -40(%rbp), %xmm0
    addss -36(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_add_f32_end:

add_f64:
__kefir_text_func_add_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    addsd -72(%rbp), %xmm0
    addsd -64(%rbp), %xmm1
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_add_f64_end:

div_f32:
__kefir_text_func_div_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    cvtps2pd %xmm1, %xmm1
    cvtps2pd %xmm0, %xmm0
    movaps %xmm1, %xmm2
    movaps %xmm1, %xmm3
    unpcklpd %xmm1, %xmm2
    mulpd %xmm0, %xmm2
    shufpd $1, %xmm0, %xmm0
    unpckhpd %xmm1, %xmm3
    mulpd %xmm1, %xmm1
    mulpd %xmm3, %xmm0
    movaps %xmm1, %xmm3
    xorps __kefir_constant_complex_float32_div(%rip), %xmm0
    shufpd $1, %xmm1, %xmm3
    addpd %xmm0, %xmm2
    addpd %xmm3, %xmm1
    divpd %xmm1, %xmm2
    cvtpd2ps %xmm2, %xmm0
    movq %xmm0, -48(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_div_f32_end:

div_f64:
__kefir_text_func_div_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fld1
    fldl -72(%rbp)
    fld %st(0)
    fmul %st(1)
    fldl -64(%rbp)
    fld %st(0)
    fmul %st(1)
    faddp %st(2)
    fxch %st(1)
    fdivrp %st(3)
    fldl -96(%rbp)
    fld %st(0)
    fmul %st(3)
    fxch %st(1)
    fmul %st(2)
    fldl -88(%rbp)
    fld %st(0)
    fmulp %st(4)
    fxch %st(3)
    faddp %st(2)
    fxch %st(1)
    fmul %st(4)
    fstpl -96(%rbp)
    fxch %st(2)
    fmulp %st(1)
    fsubp
    fmulp
    fstpl -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_div_f64_end:

mul_f32:
__kefir_text_func_mul_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    movaps %xmm1, %xmm2
    shufps $160, %xmm1, %xmm2
    mulps %xmm0, %xmm2
    xorps __kefir_constant_complex_float32_mul(%rip), %xmm0
    shufps $177, %xmm0, %xmm0
    shufps $245, %xmm1, %xmm1
    mulps %xmm1, %xmm0
    addps %xmm2, %xmm0
    movq %xmm0, -48(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_mul_f32_end:

mul_f64:
__kefir_text_func_mul_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    movq -72(%rbp), %xmm2
    movq -64(%rbp), %xmm3
    unpcklpd %xmm1, %xmm0
    movaps %xmm0, %xmm1
    xorps __kefir_constant_complex_float64_mul(%rip), %xmm1
    shufpd $1, %xmm1, %xmm1
    unpcklpd %xmm2, %xmm2
    unpcklpd %xmm3, %xmm3
    mulpd %xmm0, %xmm2
    mulpd %xmm1, %xmm3
    addpd %xmm2, %xmm3
    movaps %xmm3, %xmm0
    movaps %xmm3, %xmm1
    unpckhpd %xmm3, %xmm0
    movq %xmm1, -96(%rbp)
    movq %xmm0, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_mul_f64_end:

neg_f32:
__kefir_text_func_neg_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
    movq f32_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -32(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -32(%rbp), %xmm0
    xorps __kefir_constant_complex_float32_neg(%rip), %xmm0
    movq %xmm0, -32(%rbp)
    movq -32(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_neg_f32_end:

neg_f64:
__kefir_text_func_neg_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
    movq f64_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -64(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -64(%rbp), %xmm0
    xorps __kefir_constant_complex_float64_neg(%rip), %xmm0
    movq %xmm0, -48(%rbp)
    movq -56(%rbp), %xmm0
    xorps __kefir_constant_complex_float64_neg(%rip), %xmm0
    movq %xmm0, -40(%rbp)
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_neg_f64_end:

sub_f32:
__kefir_text_func_sub_f32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movd -48(%rbp), %xmm0
    movd -44(%rbp), %xmm1
    subss -40(%rbp), %xmm0
    subss -36(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_sub_f32_end:

sub_f64:
__kefir_text_func_sub_f64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    subsd -72(%rbp), %xmm0
    subsd -64(%rbp), %xmm1
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_sub_f64_end:

__kefir_text_section_end:

.section .rodata
    .align 16
__kefir_constant_complex_float32_mul:
    .long 0
    .long 2147483648
    .long 0
    .long 2147483648
    .align 16
__kefir_constant_complex_float32_div:
    .long 0
    .long 0
    .long 0
    .long 2147483648
    .align 16
__kefir_constant_complex_float64_mul:
    .long 0
    .long 0
    .long 0
    .long 2147483648
    .align 16
__kefir_constant_complex_long_double_div:
    .long 0
    .long 2147483648
    .long 16383
    .long 0
    .align 16
__kefir_constant_complex_float32_neg:
    .long 2147483648
    .long 2147483648
    .long 2147483648
    .long 2147483648
    .align 16
__kefir_constant_complex_float64_neg:
    .long 0
    .long 2147483648
    .long 0
    .long 2147483648
