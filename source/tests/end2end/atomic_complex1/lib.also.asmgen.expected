.att_syntax
.section .note.GNU-stack,"",%progbits

.global add_ld
.global div_ld
.global mul_ld
.global neg_ld
.global sub_ld
.global add_f32
.global add_f64
.global div_f32
.global div_f64
.global mul_f32
.global mul_f64
.global neg_f32
.global neg_f64
.global sub_f32
.global sub_f64
.extern ld_1
.extern f32_1
.extern f64_1
.extern __kefir_opt_float32_neg
.extern __kefir_opt_float64_neg
.extern __kefirrt_opt_float32_to_uint
.extern __kefirrt_opt_float64_to_uint

.section .text
add_ld:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fldt -160(%rbp)
    faddp
    fldt -96(%rbp)
    fldt -144(%rbp)
    faddp
    fstpt -144(%rbp)
    fstpt -160(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

div_ld:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -96(%rbp)
    fldt -112(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    call __kefirrt_opt_complex_long_double_div@PLT
    fstpt -160(%rbp)
    fstpt -144(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

mul_ld:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -96(%rbp)
    fldt -112(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    call __kefirrt_opt_complex_long_double_mul@PLT
    fstpt -160(%rbp)
    fstpt -144(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

neg_ld:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
    stmxcsr -8(%rbp)
    movq ld_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fchs
    fstpt -80(%rbp)
    fldt -96(%rbp)
    fchs
    fstpt -64(%rbp)
    fldt -64(%rbp)
    fldt -80(%rbp)
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

sub_ld:
    push %rbp
    mov %rsp, %rbp
    sub $160, %rsp
    fstcw -8(%rbp)
    mov %rdi, %rax
    movq ld_1@GOTPCREL(%rip), %rcx
    movq %rax, -128(%rbp)
    mov %rcx, %rsi
    lea -160(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -128(%rbp), %rax
    mov %rax, %rsi
    lea -112(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -112(%rbp)
    fldt -160(%rbp)
    fsubp
    fldt -96(%rbp)
    fldt -144(%rbp)
    fsubp
    fstpt -144(%rbp)
    fstpt -160(%rbp)
    fldt -144(%rbp)
    fldt -160(%rbp)
    fldcw -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

add_f32:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movd -48(%rbp), %xmm0
    movd -44(%rbp), %xmm1
    addss -40(%rbp), %xmm0
    addss -36(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

add_f64:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    addsd -72(%rbp), %xmm0
    addsd -64(%rbp), %xmm1
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

div_f32:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    call __kefirrt_opt_complex_float32_div@PLT
    movq %xmm0, -48(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

div_f64:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    movq -72(%rbp), %xmm2
    movq -64(%rbp), %xmm3
    call __kefirrt_opt_complex_float64_div@PLT
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

mul_f32:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    call __kefirrt_opt_complex_float32_mul@PLT
    movq %xmm0, -48(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

mul_f64:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    movq -72(%rbp), %xmm2
    movq -64(%rbp), %xmm3
    call __kefirrt_opt_complex_float64_mul@PLT
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

neg_f32:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
    movq f32_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -32(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -32(%rbp), %xmm0
    xorps __kefir_opt_complex_float32_neg(%rip), %xmm0
    movq %xmm0, -32(%rbp)
    movq -32(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

neg_f64:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
    movq f64_1@GOTPCREL(%rip), %rax
    mov %rax, %rsi
    lea -64(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -64(%rbp), %xmm0
    xorps __kefir_opt_complex_float64_neg(%rip), %xmm0
    movq %xmm0, -48(%rbp)
    movq -56(%rbp), %xmm0
    xorps __kefir_opt_complex_float64_neg(%rip), %xmm0
    movq %xmm0, -40(%rbp)
    movq -48(%rbp), %xmm0
    movq -40(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

sub_f32:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f32_1@GOTPCREL(%rip), %rcx
    movq %rax, -40(%rbp)
    mov %rcx, %rsi
    lea -48(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -40(%rbp), %rax
    mov %rax, %rsi
    lea -40(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movd -48(%rbp), %xmm0
    movd -44(%rbp), %xmm1
    subss -40(%rbp), %xmm0
    subss -36(%rbp), %xmm1
    movd %xmm0, -48(%rbp)
    movd %xmm1, -44(%rbp)
    movq -48(%rbp), %xmm0
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret

sub_f64:
    push %rbp
    mov %rsp, %rbp
    sub $96, %rsp
    stmxcsr -8(%rbp)
    mov %rdi, %rax
    movq f64_1@GOTPCREL(%rip), %rcx
    movq %rax, -80(%rbp)
    mov %rcx, %rsi
    lea -96(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -80(%rbp), %rax
    mov %rax, %rsi
    lea -72(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    subsd -72(%rbp), %xmm0
    subsd -64(%rbp), %xmm1
    movq %xmm0, -96(%rbp)
    movq %xmm1, -88(%rbp)
    movq -96(%rbp), %xmm0
    movq -88(%rbp), %xmm1
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret


