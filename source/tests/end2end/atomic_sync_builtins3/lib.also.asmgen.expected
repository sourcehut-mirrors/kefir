.att_syntax
.section .note.GNU-stack,"",%progbits

.global test_sync_bool_compare_and_swap16
.type test_sync_bool_compare_and_swap16, @function
.global test_sync_bool_compare_and_swap32
.type test_sync_bool_compare_and_swap32, @function
.global test_sync_bool_compare_and_swap64
.type test_sync_bool_compare_and_swap64, @function
.global test_sync_bool_compare_and_swap8
.type test_sync_bool_compare_and_swap8, @function
.global test_sync_val_compare_and_swap8
.type test_sync_val_compare_and_swap8, @function
.global test_sync_val_compare_and_swap16
.type test_sync_val_compare_and_swap16, @function
.global test_sync_val_compare_and_swap32
.type test_sync_val_compare_and_swap32, @function
.global test_sync_val_compare_and_swap64
.type test_sync_val_compare_and_swap64, @function
.extern __atomic_compare_exchange

.section .text
__kefir_text_section_begin:
test_sync_bool_compare_and_swap16:
__kefir_text_func_test_sync_bool_compare_and_swap16_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %si, %rcx
    movw %cx, -4(%rbp)
    movsx %dx, %rcx
    movw %cx, -2(%rbp)
    mov $2, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -4(%rbp), %rdx
    leaq -2(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_bool_compare_and_swap16_end:

test_sync_bool_compare_and_swap32:
__kefir_text_func_test_sync_bool_compare_and_swap32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %esi, %rcx
    movl %ecx, -8(%rbp)
    movsx %edx, %rcx
    movl %ecx, -4(%rbp)
    mov $4, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -8(%rbp), %rdx
    leaq -4(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_bool_compare_and_swap32_end:

test_sync_bool_compare_and_swap64:
__kefir_text_func_test_sync_bool_compare_and_swap64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movq %rsi, -16(%rbp)
    movq %rdx, -8(%rbp)
    mov $8, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -16(%rbp), %rdx
    leaq -8(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_bool_compare_and_swap64_end:

test_sync_bool_compare_and_swap8:
__kefir_text_func_test_sync_bool_compare_and_swap8_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %sil, %rcx
    movb %cl, -2(%rbp)
    movsx %dl, %rcx
    movb %cl, -1(%rbp)
    mov $1, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -2(%rbp), %rdx
    leaq -1(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_bool_compare_and_swap8_end:

test_sync_val_compare_and_swap8:
__kefir_text_func_test_sync_val_compare_and_swap8_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %sil, %rcx
    movb %cl, -2(%rbp)
    movsx %dl, %rcx
    movb %cl, -1(%rbp)
    mov $1, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -2(%rbp), %rdx
    leaq -1(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movsxb -2(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_val_compare_and_swap8_end:

test_sync_val_compare_and_swap16:
__kefir_text_func_test_sync_val_compare_and_swap16_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %si, %rcx
    movw %cx, -4(%rbp)
    movsx %dx, %rcx
    movw %cx, -2(%rbp)
    mov $2, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -4(%rbp), %rdx
    leaq -2(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movsxw -4(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_val_compare_and_swap16_end:

test_sync_val_compare_and_swap32:
__kefir_text_func_test_sync_val_compare_and_swap32_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movsx %esi, %rcx
    movl %ecx, -8(%rbp)
    movsx %edx, %rcx
    movl %ecx, -4(%rbp)
    mov $4, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -8(%rbp), %rdx
    leaq -4(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movsxl -8(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_val_compare_and_swap32_end:

test_sync_val_compare_and_swap64:
__kefir_text_func_test_sync_val_compare_and_swap64_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rax
    movq %rsi, -16(%rbp)
    movq %rdx, -8(%rbp)
    mov $8, %rcx
    mov $5, %r8
    mov $5, %r9
    mov %rcx, %rdi
    mov %rax, %rsi
    leaq -16(%rbp), %rdx
    leaq -8(%rbp), %rcx
    call __atomic_compare_exchange@PLT
    movq -16(%rbp), %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_test_sync_val_compare_and_swap64_end:

__kefir_text_section_end:

