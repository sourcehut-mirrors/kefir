.att_syntax
.section .note.GNU-stack,"",%progbits

.global or1
.type or1, @function
.global or2
.type or2, @function
.global or3
.type or3, @function
.global or4
.type or4, @function
.global or5
.type or5, @function
.global or6
.type or6, @function

.section .text
__kefir_text_section_begin:
or1:
__kefir_text_func_or1_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
_kefir_func_or1_label0:
    movb %sil, -1(%rbp)
    movb %dil, -2(%rbp)
    movb -2(%rbp), %al
    movb -1(%rbp), %cl
    shl $58, %rax
    shr $58, %rax
    shl $58, %rcx
    shr $58, %rcx
    or %cl, %al
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or1_end:

or2:
__kefir_text_func_or2_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
_kefir_func_or2_label0:
    movw %si, -2(%rbp)
    movw %di, -4(%rbp)
    movw -4(%rbp), %ax
    movw -2(%rbp), %cx
    shl $50, %rax
    shr $50, %rax
    shl $50, %rcx
    shr $50, %rcx
    or %cx, %ax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or2_end:

or3:
__kefir_text_func_or3_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
_kefir_func_or3_label0:
    movl %esi, -4(%rbp)
    movl %edi, -8(%rbp)
    movl -8(%rbp), %eax
    movl -4(%rbp), %ecx
    shl $35, %rax
    shr $35, %rax
    shl $35, %rcx
    shr $35, %rcx
    or %ecx, %eax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or3_end:

or4:
__kefir_text_func_or4_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
_kefir_func_or4_label0:
    movq %rsi, -8(%rbp)
    movq %rdi, -16(%rbp)
    movq -16(%rbp), %rax
    movq -8(%rbp), %rcx
    shl $6, %rax
    shr $6, %rax
    shl $6, %rcx
    shr $6, %rcx
    or %rcx, %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or4_end:

or5:
__kefir_text_func_or5_begin:
    push %rbp
    mov %rsp, %rbp
    sub $112, %rsp
_kefir_func_or5_label0:
    movq %rdx, -64(%rbp)
    movq %rcx, -56(%rbp)
    movq %rdi, -48(%rbp)
    movq %rsi, -40(%rbp)
    movdqu -64(%rbp), %xmm0
    movdqu %xmm0, -16(%rbp)
    movdqu -48(%rbp), %xmm0
    movdqu %xmm0, -32(%rbp)
    movdqu -32(%rbp), %xmm0
    movdqu %xmm0, -112(%rbp)
    movdqu -16(%rbp), %xmm0
    movdqu %xmm0, -96(%rbp)
    movdqu -112(%rbp), %xmm0
    movdqu %xmm0, -80(%rbp)
    leaq -80(%rbp), %rax
    mov %rax, %rdi
    leaq -96(%rbp), %rax
    mov %rax, %rsi
    mov $120, %rdx
    call __kefir_bigint_or
    movq -80(%rbp), %rax
    movq -72(%rbp), %rdx
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or5_end:

or6:
__kefir_text_func_or6_begin:
    push %rbp
    mov %rsp, %rbp
    sub $208, %rsp
    mov %rdi, %r8
_kefir_func_or6_label0:
    lea 56(%rbp), %rax
    lea 16(%rbp), %rcx
    movq (%rax), %rdx
    movq %rdx, -40(%rbp)
    movq 8(%rax), %rdx
    movq %rdx, -32(%rbp)
    movq 16(%rax), %rdx
    movq %rdx, -24(%rbp)
    movq 24(%rax), %rdx
    movq %rdx, -16(%rbp)
    movq 32(%rax), %rdx
    movq %rdx, -8(%rbp)
    movq (%rcx), %rax
    movq %rax, -80(%rbp)
    movq 8(%rcx), %rax
    movq %rax, -72(%rbp)
    movq 16(%rcx), %rax
    movq %rax, -64(%rbp)
    movq 24(%rcx), %rax
    movq %rax, -56(%rbp)
    movq 32(%rcx), %rax
    movq %rax, -48(%rbp)
    movq -80(%rbp), %rax
    movq %rax, -168(%rbp)
    movq -72(%rbp), %rax
    movq %rax, -160(%rbp)
    movq -64(%rbp), %rax
    movq %rax, -152(%rbp)
    movq -56(%rbp), %rax
    movq %rax, -144(%rbp)
    movq -48(%rbp), %rax
    movq %rax, -136(%rbp)
    movq -40(%rbp), %rax
    movq %rax, -208(%rbp)
    movq -32(%rbp), %rax
    movq %rax, -200(%rbp)
    movq -24(%rbp), %rax
    movq %rax, -192(%rbp)
    movq -16(%rbp), %rax
    movq %rax, -184(%rbp)
    movq -8(%rbp), %rax
    movq %rax, -176(%rbp)
    movq -168(%rbp), %rax
    movq %rax, -128(%rbp)
    movq -160(%rbp), %rax
    movq %rax, -120(%rbp)
    movq -152(%rbp), %rax
    movq %rax, -112(%rbp)
    movq -144(%rbp), %rax
    movq %rax, -104(%rbp)
    movq -136(%rbp), %rax
    movq %rax, -96(%rbp)
    movq %r8, -168(%rbp)
    leaq -128(%rbp), %rax
    mov %rax, %rdi
    leaq -208(%rbp), %rax
    mov %rax, %rsi
    mov $310, %rdx
    call __kefir_bigint_or
    movq -168(%rbp), %r8
    mov %r8, %rax
    movq -128(%rbp), %rcx
    movq %rcx, (%rax)
    movq -120(%rbp), %rcx
    movq %rcx, 8(%rax)
    movq -112(%rbp), %rcx
    movq %rcx, 16(%rax)
    movq -104(%rbp), %rcx
    movq %rcx, 24(%rax)
    movq -96(%rbp), %rcx
    movq %rcx, 32(%rax)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_or6_end:

__kefir_text_section_end:

.att_syntax
.section .note.GNU-stack,"",%progbits


.section .text
__kefir_bigint_or:
__kefir_text_func___kefir_bigint_or_begin:
    push %rbp
    mov %rsp, %rbp
    sub $48, %rsp
_kefir_func___kefir_bigint_or_label0:
    movq %rdx, -48(%rbp)
    movq %rsi, -32(%rbp)
    movq %rdi, -40(%rbp)
    movq -48(%rbp), %rax
    mov $8, %rdx
    movsx %edx, %rcx
    mov $1, %rdx
    imul %rcx, %rdx
    add %rdx, %rax
    mov $1, %rdx
    movsx %edx, %rcx
    sub %rcx, %rax
    mov $8, %rdx
    movsx %edx, %rcx
    mov $1, %rsi
    imul %rcx, %rsi
    mov $0, %rdx
    div %rsi
    movq %rax, -24(%rbp)
    mov $0, %rcx
    movsx %ecx, %rax
    movq %rax, -16(%rbp)
_kefir_func___kefir_bigint_or_label1:
    movq -16(%rbp), %rax
    movq -24(%rbp), %rcx
    mov $0, %rdx
    cmp %rcx, %rax
    setb %dl
    mov $0, %rax
    test %edx, %edx
    sete %al
    test %al, %al
    jz _kefir_func___kefir_bigint_or_label3
_kefir_func___kefir_bigint_or_label2:
    mov $0, %rax
    lea (%rbp), %rsp
    pop %rbp
    ret
_kefir_func___kefir_bigint_or_label3:
    movq -40(%rbp), %rax
    movq -16(%rbp), %rcx
    imul $1, %rcx, %rcx
    add %rcx, %rax
    movb (%rax), %al
    and $255, %rax
    movl %eax, -8(%rbp)
    movq -32(%rbp), %rax
    movq -16(%rbp), %rcx
    imul $1, %rcx, %rcx
    add %rcx, %rax
    movb (%rax), %al
    and $255, %rax
    movl %eax, -4(%rbp)
    movl -8(%rbp), %eax
    movl -4(%rbp), %ecx
    movq -40(%rbp), %rdx
    movq -16(%rbp), %rsi
    imul $1, %rsi, %rsi
    add %rsi, %rdx
    or %ecx, %eax
    movb %al, (%rdx)
    movq -16(%rbp), %rax
    add $1, %rax
    movq %rax, -16(%rbp)
    jmp _kefir_func___kefir_bigint_or_label1
__kefir_text_func___kefir_bigint_or_end:


