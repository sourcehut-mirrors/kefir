.att_syntax
.section .note.GNU-stack,"",%progbits

.global str1_a
.type str1_a, @function
.global str1_b
.type str1_b, @function
.global str1_c
.type str1_c, @function
.global ld_load
.type ld_load, @function
.global f32_load
.type f32_load, @function
.global f64_load
.type f64_load, @function
.global ld_store
.type ld_store, @function
.global f32_store
.type f32_store, @function
.global f64_store
.type f64_store, @function
.global str1_set_a
.type str1_set_a, @function
.global str1_set_b
.type str1_set_b, @function
.global str1_set_c
.type str1_set_c, @function
.global ld_load_index
.type ld_load_index, @function
.global f32_load_index
.type f32_load_index, @function
.global ld_store_index
.type ld_store_index, @function
.global f32_store_index
.type f32_store_index, @function
.global f64_load_index
.type f64_load_index, @function
.global f64_store_index
.type f64_store_index, @function

.section .text
__kefir_text_section_begin:
str1_a:
__kefir_text_func_str1_a_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_a_end:

str1_b:
__kefir_text_func_str1_b_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    add $16, %rdi
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    movq -8(%rbp), %xmm1
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_b_end:

str1_c:
__kefir_text_func_str1_c_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    add $32, %rdi
    mov %rdi, %rsi
    lea -32(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -16(%rbp)
    fldt -32(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_c_end:

ld_load:
__kefir_text_func_ld_load_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    mov %rdi, %rsi
    lea -32(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -16(%rbp)
    fldt -32(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_ld_load_end:

f32_load:
__kefir_text_func_f32_load_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f32_load_end:

f64_load:
__kefir_text_func_f64_load_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    movq -8(%rbp), %xmm1
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f64_load_end:

ld_store:
__kefir_text_func_ld_store_begin:
    push %rbp
    mov %rsp, %rbp
    sub $80, %rsp
    stmxcsr -8(%rbp)
    lea 16(%rbp), %rax
    movq $0, -40(%rbp)
    movq $0, -24(%rbp)
    fldt (%rax)
    fstpt -48(%rbp)
    fldt 16(%rax)
    fstpt -32(%rbp)
    fldt -48(%rbp)
    fstpt -80(%rbp)
    fldt -32(%rbp)
    fstpt -64(%rbp)
    mov %rdi, %rsi
    leaq -80(%rbp), %rax
    mov %rax, %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_ld_store_end:

f32_store:
__kefir_text_func_f32_store_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -32(%rbp)
    movq -32(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    mov %rdi, %rsi
    leaq -24(%rbp), %rcx
    mov %rcx, %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f32_store_end:

f64_store:
__kefir_text_func_f64_store_begin:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -64(%rbp)
    movq %xmm1, -56(%rbp)
    movq -64(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    movq -56(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -24(%rbp), %xmm0
    movq %xmm0, -48(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -40(%rbp)
    mov %rdi, %rsi
    leaq -48(%rbp), %rcx
    mov %rcx, %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f64_store_end:

str1_set_a:
__kefir_text_func_str1_set_a_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -32(%rbp)
    movq -32(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    mov %rdi, %rsi
    leaq -24(%rbp), %rcx
    mov %rcx, %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_set_a_end:

str1_set_b:
__kefir_text_func_str1_set_b_begin:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -64(%rbp)
    movq %xmm1, -56(%rbp)
    movq -64(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    movq -56(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -24(%rbp), %xmm0
    movq %xmm0, -48(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -40(%rbp)
    add $16, %rdi
    mov %rdi, %rsi
    leaq -48(%rbp), %rcx
    mov %rcx, %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_set_b_end:

str1_set_c:
__kefir_text_func_str1_set_c_begin:
    push %rbp
    mov %rsp, %rbp
    sub $80, %rsp
    stmxcsr -8(%rbp)
    lea 16(%rbp), %rax
    movq $0, -40(%rbp)
    movq $0, -24(%rbp)
    fldt (%rax)
    fstpt -48(%rbp)
    fldt 16(%rax)
    fstpt -32(%rbp)
    fldt -48(%rbp)
    fstpt -80(%rbp)
    fldt -32(%rbp)
    fstpt -64(%rbp)
    add $32, %rdi
    mov %rdi, %rsi
    leaq -80(%rbp), %rax
    mov %rax, %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_str1_set_c_end:

ld_load_index:
__kefir_text_func_ld_load_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    mov %esi, %eax
    imul $32, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    lea -32(%rbp), %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    fldt -16(%rbp)
    fldt -32(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_ld_load_index_end:

f32_load_index:
__kefir_text_func_f32_load_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %esi, %eax
    imul $8, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f32_load_index_end:

ld_store_index:
__kefir_text_func_ld_store_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $80, %rsp
    stmxcsr -8(%rbp)
    lea 16(%rbp), %rax
    movq $0, -40(%rbp)
    movq $0, -24(%rbp)
    fldt (%rax)
    fstpt -48(%rbp)
    fldt 16(%rax)
    fstpt -32(%rbp)
    fldt -48(%rbp)
    fstpt -80(%rbp)
    fldt -32(%rbp)
    fstpt -64(%rbp)
    mov %esi, %eax
    imul $32, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    leaq -80(%rbp), %rax
    mov %rax, %rdx
    mov $32, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_ld_store_index_end:

f32_store_index:
__kefir_text_func_f32_store_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $32, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -32(%rbp)
    movq -32(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    mov %esi, %eax
    imul $8, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    leaq -24(%rbp), %rax
    mov %rax, %rdx
    mov $8, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f32_store_index_end:

f64_load_index:
__kefir_text_func_f64_load_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $16, %rsp
    mov %esi, %eax
    imul $16, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    lea -16(%rbp), %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_load@PLT
    movq -16(%rbp), %xmm0
    movq -8(%rbp), %xmm1
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f64_load_index_end:

f64_store_index:
__kefir_text_func_f64_store_index_begin:
    push %rbp
    mov %rsp, %rbp
    sub $64, %rsp
    stmxcsr -8(%rbp)
    movq %xmm0, -48(%rbp)
    movq %xmm1, -40(%rbp)
    movq -48(%rbp), %xmm0
    movq %xmm0, -24(%rbp)
    movq -40(%rbp), %xmm0
    movq %xmm0, -16(%rbp)
    movq -24(%rbp), %xmm0
    movq %xmm0, -64(%rbp)
    movq -16(%rbp), %xmm0
    movq %xmm0, -56(%rbp)
    mov %esi, %eax
    imul $16, %rax, %rax
    add %rax, %rdi
    mov %rdi, %rsi
    leaq -64(%rbp), %rax
    mov %rax, %rdx
    mov $16, %rdi
    mov $5, %rcx
    call __atomic_store@PLT
    ldmxcsr -8(%rbp)
    lea (%rbp), %rsp
    pop %rbp
    ret
__kefir_text_func_f64_store_index_end:

__kefir_text_section_end:

