.intel_syntax prefix
.section .note.GNU-stack,"",%progbits

.section .text

# Opcode handlers
.extern __kefirrt_nop_impl
.extern __kefirrt_jmp_impl
.extern __kefirrt_ijmp_impl
.extern __kefirrt_branch_impl
.extern __kefirrt_push_impl
.extern __kefirrt_pop_impl
.extern __kefirrt_pick_impl
.extern __kefirrt_xchg_impl
.extern __kefirrt_iadd_impl
.extern __kefirrt_iadd1_impl
.extern __kefirrt_isub_impl
.extern __kefirrt_imul_impl
.extern __kefirrt_idiv_impl
.extern __kefirrt_imod_impl
.extern __kefirrt_udiv_impl
.extern __kefirrt_umod_impl
.extern __kefirrt_ineg_impl
.extern __kefirrt_inot_impl
.extern __kefirrt_iand_impl
.extern __kefirrt_ior_impl
.extern __kefirrt_ixor_impl
.extern __kefirrt_ishr_impl
.extern __kefirrt_isar_impl
.extern __kefirrt_ishl_impl
.extern __kefirrt_iequals_impl
.extern __kefirrt_igreater_impl
.extern __kefirrt_ilesser_impl
.extern __kefirrt_iabove_impl
.extern __kefirrt_ibelow_impl
.extern __kefirrt_band_impl
.extern __kefirrt_bor_impl
.extern __kefirrt_bnot_impl
.extern __kefirrt_trunc1_impl
.extern __kefirrt_extend8_impl
.extern __kefirrt_extend16_impl
.extern __kefirrt_extend32_impl
.extern __kefirrt_offsetptr_impl
.extern __kefirrt_elementptr_impl
.extern __kefirrt_load8u_impl
.extern __kefirrt_load8i_impl
.extern __kefirrt_load16u_impl
.extern __kefirrt_load16i_impl
.extern __kefirrt_load32u_impl
.extern __kefirrt_load32i_impl
.extern __kefirrt_load64_impl
.extern __kefirrt_loadld_impl
.extern __kefirrt_store8_impl
.extern __kefirrt_store16_impl
.extern __kefirrt_store32_impl
.extern __kefirrt_store64_impl
.extern __kefirrt_storeld_impl
.extern __kefirrt_bzero_impl
.extern __kefirrt_bcopy_impl
.extern __kefirrt_extubits_impl
.extern __kefirrt_extsbits_impl
.extern __kefirrt_insertbits_impl
.extern __kefirrt_getlocal_impl
.extern __kefirrt_f32add_impl
.extern __kefirrt_f32sub_impl
.extern __kefirrt_f32mul_impl
.extern __kefirrt_f32div_impl
.extern __kefirrt_f32neg_impl
.extern __kefirrt_f64add_impl
.extern __kefirrt_f64sub_impl
.extern __kefirrt_f64mul_impl
.extern __kefirrt_f64div_impl
.extern __kefirrt_f64neg_impl
.extern __kefirrt_ldadd_impl
.extern __kefirrt_ldsub_impl
.extern __kefirrt_ldmul_impl
.extern __kefirrt_lddiv_impl
.extern __kefirrt_ldneg_impl
.extern __kefirrt_f32equals_impl
.extern __kefirrt_f32greater_impl
.extern __kefirrt_f32lesser_impl
.extern __kefirrt_f64equals_impl
.extern __kefirrt_f64greater_impl
.extern __kefirrt_f64lesser_impl
.extern __kefirrt_ldequals_impl
.extern __kefirrt_ldgreater_impl
.extern __kefirrt_ldlesser_impl
.extern __kefirrt_ldtrunc1_impl
.extern __kefirrt_f32cint_impl
.extern __kefirrt_f64cint_impl
.extern __kefirrt_intcf32_impl
.extern __kefirrt_intcf64_impl
.extern __kefirrt_uintcf32_impl
.extern __kefirrt_uintcf64_impl
.extern __kefirrt_f32cf64_impl
.extern __kefirrt_f64cf32_impl
.extern __kefirrt_alloca_impl
.extern __kefirrt_intcld_impl
.extern __kefirrt_uintcld_impl
.extern __kefirrt_ldcint_impl
.extern __kefirrt_f32cld_impl
.extern __kefirrt_f64cld_impl
.extern __kefirrt_ldcf32_impl
.extern __kefirrt_ldcf64_impl
.extern __kefirrt_pushscope_impl
.extern __kefirrt_popscope_impl
.extern __kefirrt_setldh_impl
.extern __kefirrt_setldl_impl
# Runtime functions
.extern __kefirrt_preserve_state
.extern __kefirrt_restore_state
.extern __kefirrt_save_registers
.extern __kefirrt_load_integer_vararg
.extern __kefirrt_load_sse_vararg
.extern __kefirrt_copy_vararg

# Externals

# Globals
.global make_s1
.global cast_int
.global sum3_one
.global unwrap_s1

make_s1:
# Begin prologue of make_s1
    call __kefirrt_preserve_state
    sub %rsp, 32
    call __kefirrt_generic_prologue
# Load parameters of make_s1
    push %rdi
# End prologue of make_s1
    lea %rbx, [__make_s1_body]
    jmp [%rbx]
__make_s1_body:
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_store32_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 4
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_load32u_impl, 0
    .quad __kefirrt_inline_assembly1, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 4
    .quad __make_s1_epilogue, 0
    .quad __make_s1_epilogue, 0
__make_s1_epilogue:
# Begin epilogue of make_s1
    pop %r12
    mov %rax, [%r12]
    mov %rsp, %r14
    add %rsp, 32
    jmp __kefirrt_restore_state
# End of make_s1

cast_int:
# Begin prologue of cast_int
    call __kefirrt_preserve_state
    sub %rsp, 32
    call __kefirrt_generic_prologue
# Load parameters of cast_int
    push %rdi
# End prologue of cast_int
    lea %rbx, [__cast_int_body]
    jmp [%rbx]
__cast_int_body:
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_store64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 8
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_load64_impl, 0
    .quad __kefirrt_inline_assembly3, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 8
    .quad __kefirrt_load32u_impl, 0
    .quad __cast_int_epilogue, 0
    .quad __cast_int_epilogue, 0
__cast_int_epilogue:
# Begin epilogue of cast_int
    pop %rax
    mov %rsp, %r14
    add %rsp, 32
    jmp __kefirrt_restore_state
# End of cast_int

sum3_one:
# Begin prologue of sum3_one
    call __kefirrt_preserve_state
    sub %rsp, 48
    call __kefirrt_generic_prologue
# Load parameters of sum3_one
    push %rdi
    push %rsi
    push %rdx
# End prologue of sum3_one
    lea %rbx, [__sum3_one_body]
    jmp [%rbx]
__sum3_one_body:
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 16
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_store64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 8
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_store64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_store64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 24
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 16
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_load64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 8
    .quad __kefirrt_load64_impl, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 16
    .quad __kefirrt_load64_impl, 0
    .quad __kefirrt_push_impl, 1
    .quad __kefirrt_inline_assembly0, 0
    .quad __kefirrt_getlocal_impl, 16
    .quad __kefirrt_offsetptr_impl, 24
    .quad __kefirrt_load64_impl, 0
    .quad __sum3_one_epilogue, 0
    .quad __sum3_one_epilogue, 0
__sum3_one_epilogue:
# Begin epilogue of sum3_one
    pop %rax
    mov %rsp, %r14
    add %rsp, 48
    jmp __kefirrt_restore_state
# End of sum3_one

unwrap_s1:
# Begin prologue of unwrap_s1
    call __kefirrt_preserve_state
    sub %rsp, 48
    call __kefirrt_generic_prologue
# Load parameters of unwrap_s1
    mov [%r14 + 16], %rdi
    lea %r12, [%r14 + 16]
    push %r12
# End prologue of unwrap_s1
    lea %rbx, [__unwrap_s1_body]
    jmp [%rbx]
__unwrap_s1_body:
    .quad __kefirrt_getlocal_impl, 32
    .quad __kefirrt_xchg_impl, 1
    .quad __kefirrt_bcopy_impl, 4
    .quad __kefirrt_getlocal_impl, 32
    .quad __kefirrt_offsetptr_impl, 4
    .quad __kefirrt_getlocal_impl, 32
    .quad __kefirrt_inline_assembly2, 0
    .quad __kefirrt_getlocal_impl, 32
    .quad __kefirrt_offsetptr_impl, 4
    .quad __kefirrt_load32u_impl, 0
    .quad __unwrap_s1_epilogue, 0
    .quad __unwrap_s1_epilogue, 0
__unwrap_s1_epilogue:
# Begin epilogue of unwrap_s1
    pop %rax
    mov %rsp, %r14
    add %rsp, 48
    jmp __kefirrt_restore_state
# End of unwrap_s1

# Inline assembly fragment #0
__kefirrt_inline_assembly0:
    mov %rcx, [%rsp]
    mov %rdx, [%rsp + 8]
    mov %rsi, [%rsp + 24]
    mov %rdi, [%rsp + 16]
# Begin of fragment #0 code
add %rcx, %rsi
add %rdx, %rdi
add %rcx, %rdx
# End of fragment #0 code
    mov %r8, [%rsp + 40]
    mov [%r8], %rcx
    mov %r8, [%rsp + 32]
    mov [%r8], %rdx
    add %rsp, 48
    add %rbx, 16
    jmp [%rbx]

# Inline assembly fragment #1
__kefirrt_inline_assembly1:
    mov %rax, [%rsp]
# Begin of fragment #1 code

# End of fragment #1 code
    mov %rcx, [%rsp + 8]
    mov [%rcx], %eax
    add %rsp, 16
    add %rbx, 16
    jmp [%rbx]

# Inline assembly fragment #2
__kefirrt_inline_assembly2:
    mov %rax, [%rsp]
    mov %eax, [%rax]
# Begin of fragment #2 code

# End of fragment #2 code
    mov %rcx, [%rsp + 8]
    mov [%rcx], %eax
    add %rsp, 16
    add %rbx, 16
    jmp [%rbx]

# Inline assembly fragment #3
__kefirrt_inline_assembly3:
    mov %rax, [%rsp]
# Begin of fragment #3 code

# End of fragment #3 code
    mov %rcx, [%rsp + 8]
    mov [%rcx], %eax
    add %rsp, 16
    add %rbx, 16
    jmp [%rbx]

.section .data
__kefirrt_module_static_vars:
    .byte 0x73, 0x75, 0x6d, 0x33, 0x5f, 0x6f, 0x6e, 0x65, 0x00
    .byte 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x31, 0x00
    .byte 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x31, 0x00
    .byte 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x00

